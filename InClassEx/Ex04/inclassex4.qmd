---
title: "In Class Ex 4"

author: "Cheng Chun Chieh"

date: "4 May 2024"
date-modified: "last-modified"

format: html
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
  
editor: visual
---

# Visual Statistics Analysis

# 1. Getting Started

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

```{r}
exam <- read_csv("data/Exam_data.csv")
```

# 2. ggstatsplot methods

We should set the random seed first.

```{r}
set.seed(1234)
```

Here we are able to combine both the visualisation and the statistical testing into one visualisation. The danger here is not knowing what is happening at the back end - hence it is necessary to understand the documentation.

Below is a summary of the analyses for ggstatsplot:

![](images/clipboard-1167829818.png)

## 2.1 Makeover of Histogram Plot

The code chunk:

-   `type` - allow us to choose which test - whether parametric, nonparametric, robust or bayes

    -   e.g. if you select np (non-parametric) - will auto select median instead of mean

-   `test.value` - number indicating the true value of the mean

    ![](images/clipboard-131788596.png)

```{r}

p <- gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  conf.level = 0.95,
  bin.args = list( color = "darkblue",
                   fill = "lightblue",
                   alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth =2),
  xlab = "English scores"
)

p
```

Extracting the stats from the plot:

```{r}
extract_stats(p)
```

## 2.2 To show the Normal Distribution Curve

-   `normal.curve` - set to TRUE to show the curve

-   and it also allows for further customisation

```{r}
gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  conf.level = 0.95,
  bin.args = list( color = "darkblue",
                   fill = "lightblue",
                   alpha = 0.7),
  normal.curve = TRUE,
  normal.curve.args = list(linewidth = 1,
                           color = "grey"),
  xlab = "English scores"
)
```

## 2.3 Dot Plot

```{r}
ggdotplotstats(
  data = exam,
  x = ENGLISH,
  y= CLASS,
  title = "Mean of English Scores across Classes",
  xlab = "English Scores",
  ylab = "Class"
)
```

::: callout-note
Notice that the classes are sorted according to their mean - here we notice that students in Class 3D perform better than Class 3C on average.
:::

## 2.4 Within Sample Stats

```{r}
exam_long <- exam %>%
              pivot_longer(cols = c(MATHS, SCIENCE, ENGLISH),
                           names_to = "SUBJECT",
                           values_to = "SCORE") %>%
              filter(CLASS == "3A")
```

```{r}
ggwithinstats(
  data = filter(exam_long, SUBJECT %in% c("MATHS", "SCIENCE")),
  x = SUBJECT, 
  y = SCORE,
  type = "p",
  messages = FALSE,
  pairwise.display = "significant"
)
```

## 2.5 Scatterstats

-   `marginal = TRUE` - plotting the histogram/distribution by the sides

-   `label` - to highlight the labels within the plots

::: panel-tabset
### Plots

```{r}
g <- ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH, 
  marginal = TRUE, 
  label.var = ID, 
  label.expression = ENGLISH > 90 & MATHS > 90
)

g
```

### Statistics

```{r}
extract_stats(g)
```
:::

# 3. Visualising Models

-   performance is part of the package under easystats

```{r}
pacman::p_load(readxl, performance, parameters, see)
```

![](images/clipboard-613501372.png){width="448"}

## 3.1 Importing data

Using read_xl to import excel data

-   can specify the specific worksheet or row/columns

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

```{r}
check_c <- check_collinearity(model)

plot(check_c)
```

By looking at the plot - we can see that the Age and the Mfg_year are highly correlated - and hence we need to exclude on of them. Here, we use a simple visualisation to help us to see instead of looking through a table.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

```{r}
plot(parameters(model1))
```

Similarly, we can use the ggcoefstats:

```{r}
ggcoefstats(model1, 
            output = "plot")
```

# 4. Funnel Plots

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

```{r}
WHdata <- read_csv("data/WHData-2018.csv") %>%
  mutate_if(is.character, as.factor)
```
