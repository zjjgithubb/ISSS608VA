{
  "hash": "f3e16f512f98f04c150ef0002f4b1e0e",
  "result": {
    "markdown": "---\ntitle: \"Hands-On Ex 1\"\n\nauthor: \"Cheng Chun Chieh\"\n\ndate: \"12 Apr 2024\"\ndate-modified: \"last-modified\"\n\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n  \neditor: visual\n---\n\n\n# Layered Grammar of Graphics: ggplot2 methods\n\n## 1.1 Loading of the Required Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n## 1.2 Loading the data set\n\nFor this exercise, we will be using the Year End Examination Grades of a cohort of Primary 3 students from a local school.\n\nWe will use the `read_csv` function of readr/tidyverse to read the provided data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead (exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n```\n:::\n:::\n\n\nWe use the `head()` to take a look at the columns - which comprise seven columns - 4 categorical (ID, Class, Gender and Race) and 3 continuous data (Scores for English, Maths and Science).\n\n## 1.3 Introducing ggplot\n\nWe will first look at [ggplot](https://ggplot2.tidyverse.org/).\n\nggplot cheat sheet:\n\n![](images/Untitled.png)\n\n![](images/Untitled-01.png)\n\n### 1.3.1 R Graphics vs ggplot\n\nComparing the choice of using R Graphics vs ggplot:\n\n::: panel-tabset\n## R Graphics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n:::\n\nGood to learn ggplot2 as it provides a more powerful tool that is customisable, although it means learning its way of language first. That said, we all need to do more customisation at some point in time - so just jump into it!\n\n## 1.4 Grammar of Graphics\n\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) **Grammar of Graphics**, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\n\nThere are two principles in Grammar of Graphics, they are:\n\n-   Graphics = distinct layers of grammatical elements\n\n-   Meaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n![](images/clipboard-2414661420.png)\n\nA short description of each building block are as follows:\n\n-   **Data**: The dataset being plotted.\n\n-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\n\n-   **Geometrics**: The visual elements used for our data, such as point, bar or line.\n\n-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\n\n-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).\n\n-   **Coordinate systems** define the plane on which data are mapped on the graphic.\n\n-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n## 1.5 Essential elements of ggplot2\n\nLets break down the elements of ggplot2.\n\nWhen we use `ggplot()` , it initialises a ggplot object and creates a blank canvas. The data argument defines the dataset that we want to plot. If the dataset is not already a data.frame, it will be converted to one by `fortify()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 1.6 Aesthetic mappings\n\nRefer to this [link](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)for more info.\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\n\nAll aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call (in later part of this lesson, you will see that each *geom* layer can have its own aes specification)\n\nCode chunk below adds the aesthetic element into the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS))\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n-   ggplot includes the x-axis and the axis’s label.\n:::\n\n## 1.7 geom\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\n-   *geom_point* for drawing individual points (e.g., a scatter plot)\n\n-   *geom_line* for drawing lines (e.g., for a line charts)\n\n-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)\n\n-   *geom_bar* for drawing bars (e.g., for bar charts)\n\n-   *geom_histogram* for drawing binned values (e.g. a histogram)\n\n-   *geom_polygon* for drawing arbitrary shapes\n\n-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n![](images/clipboard-2616756549.png)\n\n-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.\n\n-   For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).\n\n### 1.7.1 Geometric Objects: geom_bar\n\nThe code chunk below plots a bar chart by using [`geom_bar()`](https://ggplot2.tidyverse.org/reference/geom_bar.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### 1.7.2 Geometric Objects: geom_dotplot\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nIn the code chunk below, [`geom_dotplot()`](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) of ggplot2 is used to plot a dot plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: callout-warning\nThe y scale is not very useful, in fact it is very misleading.\n:::\n\n::: callout-note\nThe code chunk below performs the following two steps:\n\n-   `scale_y_continuous()` is used to turn off the y-axis, and\n\n-   *binwidth argument* is used to change the binwidth to 2.5.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### 1.7.3 Geometric Objects: `geom_histogram()`\n\nIn the code chunk below, [*geom_histogram()*](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in *MATHS* field of *exam_data*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nNote that the default bin is **30**.\n:::\n\n### 1.7.4 Modifying a geometric object by changing `geom()`\n\nIn the code chunk below,\n\n-   *bins* argument is used to change the number of bins to 20,\n\n-   *fill* argument is used to shade the histogram with light blue color, and\n\n-   *color* argument is used to change the outline colour of the bars in black\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### 1.7.5 Modifying a geometric object by changing *aes()*\n\nThe code chunk below changes the interior colour of the histogram (i.e. *fill*) by using sub-group of *aesthetic()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nThis approach can be used to colour, fill and alpha of the geometric.\n:::\n\n### 1.7.6 Geometric Objects: geom-density()\n\n[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.\n\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below plots two kernel density lines by using *colour* or *fill* arguments of *aes()*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### 1.7.7 Geometric Objects: geom_boxplot\n\n[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using [`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### 1.7.8 Geometric Objects: geom_violin\n\n[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### 1.7.9 Geometric Objects: geom_point()\n\n[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.\n\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### 1.7.10 *geom* objects can be combined\n\nThe code chunk below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## 1.8 stat function\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n\n    -   a mean\n\n    -   a confidence limit\n\n-   There are two ways to use these functions:\n\n    -   add a `stat_()` function and override the default geom, or\n\n    -   add a `geom_()` function and override the default stat\n\n### 1.8.1 Working with `stat()`\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### 1.8.2 Working with stat - the *stat_summary()* method\n\nThe code chunk below adds mean values by using [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### 1.8.3 Working with stat - the `geom()` method\n\nThe code chunk below adding mean values by using `geom_()` function and overriding the default stat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### 1.8.4 Adding a best fit curve on a scatterplot?\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n![In the code chunk below, [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.](images/clipboard-852318894.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n-   The default method used is *loess*.\n:::\n\nThe default smoothing method can be overridden as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## 1.9 Facets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).\n\n### 1.9.1 Working with `facet_wrap()`\n\n[`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nThe code chunk below plots a trellis plot using `facet-wrap()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n### 1.9.2 `facet_grid()` function\n\n[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\nThe code chunk below plots a trellis plot using `facet_grid()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## 1.10 Coordinates\n\nThe [*Coordinates* ](https://ggplot2.tidyverse.org/reference/index.html#coordinate-systems)functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n-   [coord_cartesian()](https://ggplot2.tidyverse.org/reference/coord_cartesian.html) - the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n\n-   [coord_flip()](https://ggplot2.tidyverse.org/reference/coord_flip.html) - a cartesian system with the x and y flipped.\n\n-   [coord_fixed()](https://ggplot2.tidyverse.org/reference/coord_fixed.html) - a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n\n-   [coord_quickmap()](https://ggplot2.tidyverse.org/reference/coord_map.html) - a coordinate system that approximates a good aspect ratio for maps.\n\n### 1.10.1 Working with Coordinate\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### 1.10.2 Changing the y- and x-axis range\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## 1.11 Themes\n\nThemes control elements of the graph not related to the data. For example:\n\n-   background colour\n\n-   size of fonts\n\n-   gridlines\n\n-   colour of labels\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n### 1.11.1 Working with Themes\n\nThe code chunk below plot a horizontal bar chart using `theme_gray()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nA horizontal bar chart plotted using `theme_classic()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nA horizontal bar chart plotted using `theme_minimal()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## 1.12 Reference\n\n-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.\n\n-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.\n\n-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version\n\n-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n\n-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n\n-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n\n# 2.1 Trying out ggplot\n\n::: panel-tabset\n## Box Plot of Maths\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  theme_light() +\n  labs(title=\"Maths scores across Gender\", y=\"Maths Score\", x=\"Gender\")\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## Box Plots of Maths, Eng and Science\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_subset <- exam_data[, c(\"MATHS\", \"SCIENCE\", \"ENGLISH\", \"GENDER\")]\n\n# Reshape the data for plotting\ndata_long <- reshape2::melt(data_subset, id.vars = \"GENDER\", variable.name = \"Score\")\n\n# Create the boxplot\nggplot(data_long, aes(x = Score, y = value, fill = GENDER)) +\n  geom_boxplot() +\n    xlab(\"Subject\") +\n    ylab(\"Score\") +\n    ggtitle(\"Boxplots of Scores by Subjects and Gender\") +\n    theme(legend.position = \"top\") +\n  stat_summary(fun=mean, geom=\"point\", shape=18, size=2, color=\"black\", position = position_dodge(width=0.75)) +  # Add average\n  stat_summary(fun=median, geom=\"point\", shape=16, size=2, color=\"grey\", position = position_dodge(width=0.75)) +  # Add median\n  stat_summary(fun=quantile, geom=\"errorbar\", width=0.4, color=\"black\", fun.args=list(probs=c(0.25, 0.75)))\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n## Boxplots using Facet\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = data_long, aes(x = GENDER, y = value, fill=GENDER)) +\n  geom_boxplot() +\n  facet_wrap(~ Score, scales = \"free_y\", nrow = 1) +  \n  xlab(\"Gender\") +\n  ylab(\"Score\") +\n  ggtitle(\"Boxplots of Scores by Gender for each Subject\")\n```\n\n::: {.cell-output-display}\n![](handson_ex01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n:::\n",
    "supporting": [
      "handson_ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}