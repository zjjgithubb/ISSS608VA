{
  "hash": "41bd42efec84ad74f3654895029f6a78",
  "result": {
    "markdown": "---\ntitle: \"In Class Ex 4\"\n\nauthor: \"Cheng Chun Chieh\"\n\ndate: \"4 May 2024\"\ndate-modified: \"last-modified\"\n\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n  \neditor: visual\n---\n\n\n# Visual Statistics Analysis\n\n# 1. Getting Started\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n# 2. ggstatsplot methods\n\nWe should set the random seed first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\nHere we are able to combine both the visualisation and the statistical testing into one visualisation. The danger here is not knowing what is happening at the back end - hence it is necessary to understand the documentation.\n\nBelow is a summary of the analyses for ggstatsplot:\n\n![](images/clipboard-1167829818.png)\n\n## 2.1 Makeover of Histogram Plot\n\nThe code chunk:\n\n-   `type` - allow us to choose which test - whether parametric, nonparametric, robust or bayes\n\n    -   e.g. if you select np (non-parametric) - will auto select median instead of mean\n\n-   `test.value` - number indicating the true value of the mean\n\n    ![](images/clipboard-131788596.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- gghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  conf.level = 0.95,\n  bin.args = list( color = \"darkblue\",\n                   fill = \"lightblue\",\n                   alpha = 0.7),\n  normal.curve = FALSE,\n  normal.curve.args = list(linewidth =2),\n  xlab = \"English scores\"\n)\n\np\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nExtracting the stats from the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_stats(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$subtitle_data\n# A tibble: 1 × 16\n  term       effectsize      estimate conf.level conf.low conf.high    pd\n  <chr>      <chr>              <dbl>      <dbl>    <dbl>     <dbl> <dbl>\n1 Difference Bayesian t-test     7.16       0.95     5.54      8.75     1\n  prior.distribution prior.location prior.scale    bf10 method         \n  <chr>                       <dbl>       <dbl>   <dbl> <chr>          \n1 cauchy                          0       0.707 4.54e13 Bayesian t-test\n  conf.method log_e_bf10 n.obs expression\n  <chr>            <dbl> <int> <list>    \n1 ETI               31.4   322 <language>\n\n$caption_data\nNULL\n\n$pairwise_comparisons_data\nNULL\n\n$descriptive_data\nNULL\n\n$one_sample_data\nNULL\n\n$tidy_data\nNULL\n\n$glance_data\nNULL\n```\n:::\n:::\n\n\n## 2.2 To show the Normal Distribution Curve\n\n-   `normal.curve` - set to TRUE to show the curve\n\n-   and it also allows for further customisation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  conf.level = 0.95,\n  bin.args = list( color = \"darkblue\",\n                   fill = \"lightblue\",\n                   alpha = 0.7),\n  normal.curve = TRUE,\n  normal.curve.args = list(linewidth = 1,\n                           color = \"grey\"),\n  xlab = \"English scores\"\n)\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 2.3 Dot Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggdotplotstats(\n  data = exam,\n  x = ENGLISH,\n  y= CLASS,\n  title = \"Mean of English Scores across Classes\",\n  xlab = \"English Scores\",\n  ylab = \"Class\"\n)\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nNotice that the classes are sorted according to their mean - here we notice that students in Class 3D perform better than Class 3C on average.\n:::\n\n## 2.4 Within Sample Stats\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_long <- exam %>%\n              pivot_longer(cols = c(MATHS, SCIENCE, ENGLISH),\n                           names_to = \"SUBJECT\",\n                           values_to = \"SCORE\") %>%\n              filter(CLASS == \"3A\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggwithinstats(\n  data = filter(exam_long, SUBJECT %in% c(\"MATHS\", \"SCIENCE\")),\n  x = SUBJECT, \n  y = SCORE,\n  type = \"p\",\n  messages = FALSE,\n  pairwise.display = \"significant\"\n)\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 2.5 Scatterstats\n\n-   `marginal = TRUE` - plotting the histogram/distribution by the sides\n\n-   `label` - to highlight the labels within the plots\n\n::: panel-tabset\n### Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH, \n  marginal = TRUE, \n  label.var = ID, \n  label.expression = ENGLISH > 90 & MATHS > 90\n)\n\ng\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_stats(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$subtitle_data\n# A tibble: 1 × 14\n  parameter1 parameter2 effectsize          estimate conf.level conf.low\n  <chr>      <chr>      <chr>                  <dbl>      <dbl>    <dbl>\n1 MATHS      ENGLISH    Pearson correlation    0.831       0.95    0.794\n  conf.high statistic df.error  p.value method              n.obs conf.method\n      <dbl>     <dbl>    <int>    <dbl> <chr>               <int> <chr>      \n1     0.862      26.7      320 1.70e-83 Pearson correlation   322 normal     \n  expression\n  <list>    \n1 <language>\n\n$caption_data\n# A tibble: 1 × 17\n  parameter1 parameter2 effectsize                   estimate conf.level\n  <chr>      <chr>      <chr>                           <dbl>      <dbl>\n1 MATHS      ENGLISH    Bayesian Pearson correlation    0.829       0.95\n  conf.low conf.high    pd rope.percentage prior.distribution prior.location\n     <dbl>     <dbl> <dbl>           <dbl> <chr>                       <dbl>\n1    0.794     0.860     1               0 beta                         1.41\n  prior.scale    bf10 method                       n.obs conf.method expression\n        <dbl>   <dbl> <chr>                        <int> <chr>       <list>    \n1        1.41 5.21e79 Bayesian Pearson correlation   322 HDI         <language>\n\n$pairwise_comparisons_data\nNULL\n\n$descriptive_data\nNULL\n\n$one_sample_data\nNULL\n\n$tidy_data\nNULL\n\n$glance_data\nNULL\n```\n:::\n:::\n\n:::\n\n# 3. Visualising Models\n\n-   performance is part of the package under easystats\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, performance, parameters, see)\n```\n:::\n\n\n![](images/clipboard-613501372.png){width=\"448\"}\n\n## 3.1 Importing data\n\nUsing read_xl to import excel data\n\n-   can specify the specific worksheet or row/columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_c <- check_collinearity(model)\n\nplot(check_c)\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nBy looking at the plot - we can see that the Age and the Mfg_year are highly correlated - and hence we need to exclude on of them. Here, we use a simple visualisation to help us to see instead of looking through a table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(parameters(model1))\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nSimilarly, we can use the ggcoefstats:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggcoefstats(model1, \n            output = \"plot\")\n```\n\n::: {.cell-output-display}\n![](inclassex4_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# 4. Funnel Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nWHdata <- read_csv(\"data/WHData-2018.csv\") %>%\n  mutate_if(is.character, as.factor)\n```\n:::\n",
    "supporting": [
      "inclassex4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}