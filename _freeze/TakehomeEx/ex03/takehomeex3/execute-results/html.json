{
  "hash": "8160d53d03a72aa92098d2a4dcd157a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Ex 3\"\n\nauthor: \"Cheng Chun Chieh\"\n\ndate: \"18 May 2024\"\ndate-modified: \"last-modified\"\n\nformat: \n  html:\n    code-fold: true\n    code-tools: true\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n \neditor: visual\n---\n\n\n# 1. Overview\n\nIn Oceanus, island life is defined by the coming and going of seafaring vessels, many of which are operated by commercial fishing companies. Typically, the movement of ships and goods are a sign of Oceanus’s healthy economy, especially in the fishing business. But mundane routines can be disrupted by a major event. Analysts at FishEye International, a non-profit organization that aims to find and prevent illegal fishing, need your help to better understand one such event.\n\nFishEye has learned that SouthSeafood Express Corp has been caught fishing illegally. The scandal caused a major disruption in the close-knit fishing community. FishEye has been collecting data on ship movements and shipping records in hopes that they could assemble a cohesive store of knowledge that will allow them to better understand local commercial fishing behavior. FishEye processed open-source and commercial vessel tracking and shipping records into CatchNet: the Oceanus Knowledge Graph. Analysts examine and correct data as it is loaded but need your help to create analytical capabilities for this data.\n\nFishEye analysts need your help to perform geographic and temporal analysis of the CatchNet data so they can prevent illegal fishing from happening again. Your task is to develop new visual analytics tools and workflows that can be used to discover and understand signatures of different types of behavior. Can you use your tool to visualize a signature of SouthSeafood Express Corp’s illegal behavior? FishEye needs your help to develop a workflow to find other instances of illegal behavior.\n\n1.  FishEye analysts have long wanted to better understand the flow of commercially caught fish through Oceanus’s many ports. But as they were loading data into CatchNet, they discovered they had purchased the wrong port records. They wanted to get the ship off-load records, but they instead got the port-exit records (essentially trucks/trains leaving the port area). Port exit records do not include which vessel that delivered the products. Given this limitation, develop a visualization system to associate vessels with their probable cargos. Which vessels deliver which products and when? What are the seasonal trends and anomalies in the port exit records?\n\n2.  Develop visualizations that illustrate the inappropriate behavior of SouthSeafood Express Corp vessels. How do their movement and catch contents compare to other fishing vessels? When and where did SouthSeafood Express Corp vessels perform their illegal fishing? How many different types of suspicious behaviors are observed? Use visual evidence to justify your conclusions.\n\n3.  To support further Fisheye investigations, develop visual analytics workflows that allow you to discover other vessels engaging in behaviors similar to SouthSeafood Express Corp’s illegal activities? Provide visual evidence of the similarities.\n\n4.  How did fishing activity change after SouthSeafood Express Corp was caught? What new behaviors in the Oceanus commercial fishing community are most suspicious and why?\n\n::: callout-note\nFor this Take-home Ex 3 - I will be focusing on Qn 1 and 2 first. If time is available, I will also attempt to go in to Qn 3.\n\nTo note that we will subsequently package these as part of our project.\n:::\n\n## 1.1 Loading Packages\n\nBecause the data are given in a json file format - we will have to load it using jsonlite. The following are the packages that we will be using for this ex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, tidygraph, igraph, ggraph, visNetwork, graphlayouts, ggforce, skimr, tidytext, tidyverse, plotly, shiny, DT, sf)\n```\n:::\n\n\n## 1.2 Data Provided by the Challenge\n\n### 1.2.1 Geography Data of Oceanus\n\n![](data/Oceanus%20Geography.png)\n\n### 1.2.2 Graph Data\n\nThe following is the graph data provided:\n\n-   Directed multi-graph, allowing multiple edges between nodes\n\n-   5637 nodes\n\n-   271752 edges\n\n-   1 (weakly) connected component\n\nWhich covers:\n\n-   **Vessel Movements:** Oceanus is outfitted with a transponder/ping system named the Oceanus Vessel Locator System (OVLS).  Vessels are outfitted with a transponder and periodic 'pings' from base-stations results in a report of vessel locations at any time.  The raw ping granularity is at the minute-level but post-processing has converted it into visit/dwell times. OVLS is generally reliable, though vessel records may be missing for a variety of reasons.\n\n    -   Node/Edge types and properties present\n\n        -   Entity.Vessel: Description of the vessel\n\n        -   Entity.Location: Description of a geographic location\n\n        -   Event.TransponderPing: Links a vessel to a location\n\n-   **Harbor Reports:** Harbor masters regularly report the vessels found in their purview anytime during the day.  This data is derived from a different system than OVLS (see \"Vessel Movements\"), though the data overlaps.  Harbor Reports are provided on a different schedule from different harbors. Since no harbor reports every day, this data has lower temporal granularity than vessel movement data. Additionally, the Harbor Master is also responsible for proximate navigational beacon(s), so this data has lower spatial granularity as well.  However, the list of vessels observed is considered canonical.\n\n    -   Node/edge types present:\n\n        -   Entity.Vessel\n\n        -   Entity.location\n\n        -   Event.HarborReport\n\n-   **Harbor Import Records**: Vessels deliver cargo to the ports, and that cargo is brought into Oceanus.  These records reflect the goods that \\*leave\\* the harbor to go to businesses in Oceanus or to be exported.  It was filtered pre-ingest to focus on the delivery of raw fish.  Because it is raw, fish leave the port quickly (generally one day after delivery).  Due to clerical error, the records purchased by FishEye do not include the vessel that delivered the cargo.\n\n    -   Node/Edge types present:\n\n        -   Entity.location\n\n        -   Entity.Commodity.Fish\n\n        -   Entity.Document.DeliveryReport\n\n        -   Event.Transaction\n\n## 1.3 Importing the Data\n\nWe will use jsonlite to import the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON (\"data/mc2.json\")\n```\n:::\n\n\nImporting the nodes and edges as tibble data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <-\n  as_tibble(mc2_data$links) %>%\n  distinct()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <-\n  as_tibble(mc2_data$nodes) %>%\n  distinct()\n```\n:::\n\n\n# 2. Tidying the Data\n\n## 2.1 Looking at the Nodes\n\nWe first look at the types of nodes and how many of each are present in the data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntype_counts_nodes <- mc2_nodes %>% count(type)\n\nprint(type_counts_nodes)\n```\n:::\n\n\nOf note we have:\n\n-   5307 Delivery Reports\n\n-   178 Fishing Vessel and 100 Cargo Vessels\n\n-   10 Types of Fish\n\n### 2.1.1 Tidying the Text\n\nFrom the table above, beside the date data type and inappropriate field name issues we discussed earlier, two additional data issues can be observed. They are:\n\n-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.\n\n-   As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(““)).\n\nIn the code chunk below, `mutate()` of dplyr and `gsub()` of Base R are used to perform the data todying task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes_tidied <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes_tidied <- mc2_nodes_tidied %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mc2_nodes_tidied, \"data/rds/mc2_nodes_tidied.rds\")\n```\n:::\n\n\n## 2.2 Looking at the Edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntype_counts_edges <- mc2_edges %>% count(type)\n\nprint(type_counts_edges)\n```\n:::\n\n\n### 2.2.1 Correcting date data type\n\nThe date format is not easily readable - so we need to convert them into something useful.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$\"_last_edited_date\" <- as_datetime(mc2_edges$\"_last_edited_date\")\nmc2_edges$\"_date_added\" <- as_datetime(mc2_edges$\"_date_added\")\nmc2_edges$\"date\" <- as_datetime(\"mc2_edges$date\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n:::\n\n\n### 2.2.2 Changing the field names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algo\" = \"_algorithm\") \n```\n:::\n\n\n### 2.2.3 Splitting the Text under Type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\nmax_elements <- max(lengths(word_list))\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n```\n:::\n\n\n# 3. Examining the data\n\nLoading the rds files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- read_rds(\"data/rds/mc2_edges.rds\")\n\nmc2_nodes <- read_rds(\"data/rds/mc2_nodes_tidied.rds\")\n```\n:::\n\n\n## 3.1 Nodes Data\n\nFrom the nodes data, we have the following information:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntype_counts <- mc2_nodes %>%\n  group_by(type) %>%\n  summarise(count = n())\n\n# Display the result\nprint(type_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   type                           count\n   <chr>                          <int>\n 1 Entity.Commodity.Fish             10\n 2 Entity.Document.DeliveryReport  5307\n 3 Entity.Location.City               6\n 4 Entity.Location.Point             12\n 5 Entity.Location.Region             6\n 6 Entity.Vessel.CargoVessel        100\n 7 Entity.Vessel.Ferry.Cargo          2\n 8 Entity.Vessel.Ferry.Passenger      3\n 9 Entity.Vessel.FishingVessel      178\n10 Entity.Vessel.Other                5\n11 Entity.Vessel.Research             2\n12 Entity.Vessel.Tour                 6\n```\n\n\n:::\n:::\n\n\n+-----------------+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Data            | Description                                  | Remarks                                                                                                                                 |\n+=================+==============================================+=========================================================================================================================================+\n| Fish            | 10 Species of Fish                           | Key fields are the:                                                                                                                     |\n|                 |                                              |                                                                                                                                         |\n|                 |                                              | `name` and `id`                                                                                                                         |\n+-----------------+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Location        | Contains Point, City and Region              | Contains the `Name` and id of the location - key field is the `id`                                                                      |\n|                 |                                              |                                                                                                                                         |\n|                 |                                              | `fish_species_present` is only listed for the region. Only 3 region for commercial fishing - **Cod Table, Tuna Shelf and Wrasse Beds**. |\n+-----------------+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Delivery Report | 5307 Delivery Report                         | Contains the `id` tied to the cargo id.                                                                                                 |\n|                 |                                              |                                                                                                                                         |\n|                 |                                              | Also contains the qty by tons (`qty_tons`) and the date of the delivery (`date`).                                                       |\n+-----------------+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Fishing Vessel  | 178 Fishing Vessel                           | Contains the `Name` and id of the vessel. We can use `id` to identify the vessels.                                                      |\n|                 |                                              |                                                                                                                                         |\n|                 |                                              | Other info includes: `flag_country`, `company`, `tonnage`, `length_overall`,                                                            |\n+-----------------+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Cargo Vessel    | 100 Cargo Vessels                            | To explore given that these vessels can be used for transshipment or IUU activities.                                                    |\n+-----------------+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n| Other Vessels   | Such as Passenger, Research, Tour and Others | KIV - but dont think needed for our analysis                                                                                            |\n+-----------------+----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+\n\nWe noticed that there are two columns for the name - one with `name` and the other with `Name`. Let us try to combine them into one column for easier analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlaps <- mc2_nodes %>%\n  filter(!is.na(Name) & !is.na(name) & tolower(Name) == tolower(name))\n\n# Print overlaps\nprint(\"Overlaps between 'Name' and 'name' columns:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Overlaps between 'Name' and 'name' columns:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(overlaps)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 20\n# ℹ 20 variables: type <chr>, _last_edited_by <chr>, _date_added <chr>,\n#   _last_edited_date <chr>, _raw_source <chr>, _algorithm <chr>, name <chr>,\n#   id <chr>, Name <chr>, Description <chr>, Activities <chr>, kind <chr>,\n#   qty_tons <dbl>, date <chr>, flag_country <chr>, company <chr>,\n#   tonnage <int>, length_overall <int>, style <chr>,\n#   fish_species_present <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combine columns into one named 'name'\nmc2_nodes <- mc2_nodes %>%\n  mutate(name = ifelse(is.na(name), Name, name)) %>%\n  select(-Name)\n```\n:::\n\n\n## 3.2 Splitting the text under type\n\nLike how we split the text for edges, we will do so for the nodes data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_nodes$type, \"\\\\.\")\nmax_elements <- max(lengths(word_list))\n\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"entity\", 1:max_elements)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_df <- as_tibble(word_df) %>%\n  select(entity2, entity3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- mc2_nodes %>%\n  cbind(word_df)\n```\n:::\n\n\n## 3.3 Filter out the Species in Region\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfish_species_df <- mc2_nodes %>%\n  filter(entity3 == 'Region') %>%\n  select(name, fish_species_present)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the fish_species_present column into a long format data frame for plotting\nlong_fish_species_df <- fish_species_df %>%\n  separate_rows(fish_species_present, sep = \",\") %>%\n  mutate(fish_species_present = str_trim(fish_species_present)) %>%\n  rename(region = name, fish_species = fish_species_present)\n\nreserve_only_species <- c('Sockfish/Pisces foetida', 'Offidiaa/Piscis osseus', 'Helenaa/Pisces satis')  # Example reserve-only species\n\n# Add a column to indicate if a fish species is reserve-only\nlong_fish_species_df <- long_fish_species_df %>%\n  mutate(reserve_only = ifelse(fish_species %in% reserve_only_species, TRUE, FALSE)) %>%\n  mutate(fishtype = sub(\"/.*\", \"\", fish_species))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(long_fish_species_df, aes(x = region, y = fishtype, color = fishtype, size = reserve_only)) +\n  geom_point() +\n  scale_size_manual(values = c(`FALSE` = 2, `TRUE` = 4), guide = FALSE) +\n  labs(title = \"Fish Species Present in Different Regions\", \n       subtitle = \"Salmon is not found in the Regions\",\n       x = \"Region\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 30, hjust = 1),\n        legend.position = \"none\",\n        axis.title.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## 3.4 Edges Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntype_counts <- mc2_edges %>%\n  group_by(type) %>%\n  summarise(count = n())\n\n# Display the result\nprint(type_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  type                                  count\n  <chr>                                 <int>\n1 Event.HarborReport                     2487\n2 Event.Transaction                     10614\n3 Event.TransportEvent.TransponderPing 258542\n```\n\n\n:::\n:::\n\n\nWe have 3 groups of data in the edges mainly the HarborReport, Transaction and the TransponderPing.\n\n+------------------+------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+\n| Data             | Description                                                                                                | Remarks                                                                                                       |\n+==================+============================================================================================================+===============================================================================================================+\n| Harbor Reports   | Contains information about the vessel docking at which harbor.                                             | Key fields here are:                                                                                          |\n|                  |                                                                                                            |                                                                                                               |\n|                  | There is a key column, but not sure what it means.                                                         | `source` which is tied to the `id` of a vessel.                                                               |\n|                  |                                                                                                            |                                                                                                               |\n|                  | Contains a few other columns with aphorism, holiday greeting etc but seems not impt for our analysis here. | `target` which is tied to the `name` of the city.                                                             |\n|                  |                                                                                                            |                                                                                                               |\n|                  |                                                                                                            | `date_added` and `last_edited_date` are the two key dates available                                           |\n+------------------+------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+\n| Transaction      | Information from OCEANS                                                                                    | Key fields here are:                                                                                          |\n|                  |                                                                                                            |                                                                                                               |\n|                  | Each transaction has two rows - one connecting the transaction to the City, the other to the fish species. | `source` which is tied to the `id` of a cargo.                                                                |\n|                  |                                                                                                            |                                                                                                               |\n|                  |                                                                                                            | `target` which is tied to the `name` of the city and the `id` of the fish.                                    |\n|                  |                                                                                                            |                                                                                                               |\n|                  |                                                                                                            | `date_added` and `last_edited_date` are the two key dates available                                           |\n+------------------+------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+\n| Transponder Ping | Information from OVLS                                                                                      | Key fields here are:                                                                                          |\n|                  |                                                                                                            |                                                                                                               |\n|                  | Contains information about the time of ping, dwell time, and location.                                     | `source` which is tied to the `name`of a location.                                                            |\n|                  |                                                                                                            |                                                                                                               |\n|                  |                                                                                                            | `target` which is tied to the `id` of the vessel.                                                             |\n|                  |                                                                                                            |                                                                                                               |\n|                  |                                                                                                            | `time`, `date_added`and `last_edited_date` are the three dates available - should be focusing on `time` here. |\n+------------------+------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------+\n\n# 4. Qn 1 - Associate Vessels with their Cargo\n\nWe want to know which **vessel offload their cargo** at **which port** on **which date and time**.\n\nWe can first utilised the harbor reports to find out which vessels have been to which harbor - this would give us an initial starting point. As the list of vessels observed is canonical (i.e. accurate) - this can help with our analysis later. However, we note that the date/time is not very accurate here.\n\nNext, we need to wrangle with the transponder data. We want to have a list of all the vessels, by their date/time, which date they visited a harbor and on which day they left a harbor.\n\nSo based on the above data, we would generate a data frame with the different rows of date/time and list out in the columns - vessel, location_transponder (which port), within harbor report (yes or no).\n\nNext we will combine the transaction with the delivery report first. So we will be able to match the date of delivery, cargo_id, qty, fish, and which harbor.\n\nThen finally, we can combine the data based on the date that a vessel enter the port, and exit the port, the cargo during this time point.\n\n## 4.1 Visualising the Harbor Records\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_list <- mc2_nodes %>%\n  filter(type %in% c(\"Entity.Vessel.FishingVessel\", \"Entity.Vessel.CargoVessel\")) %>%\n  mutate(type = case_when(\n    type == \"Entity.Vessel.FishingVessel\" ~ \"FishingVessel\",\n    type == \"Entity.Vessel.CargoVessel\" ~ \"CargoVessel\"\n  )) %>%\n  select(type, name, id, flag_country, tonnage, length_overall, company) %>%\n  rename(vessel = id)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_records <- mc2_edges %>%\n  filter(type == \"Event.HarborReport\") %>%\n  select(date_added, last_edited_date, source, target) %>%\n  rename(\"vessel\" = \"source\",\n         \"port\" = \"target\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_records <- harbor_records %>%\n  left_join(vessel_list, by = \"vessel\") %>%\n  filter(!is.na(name) & name != \"\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvisit_counts <- harbor_records %>%\n  mutate(month = month(date_added, label = TRUE)) %>%\n  group_by(port, vessel, type, month) %>%\n  summarise(visit_count = n(), \n            visit_dates = paste(date_added, collapse = ', ')) %>%\n  ungroup()\n\nvisits_fishing <- visit_counts %>%\n  filter(type == \"FishingVessel\")\n\nvisits_fishing <- visits_fishing %>%\n  complete(month, port, fill = list(visit_count = NA))\n\nvisits_cargo <- visit_counts %>%\n  filter(type == \"CargoVessel\")\n\nvisits_cargo <- visits_cargo %>%\n  complete(month, port, fill = list(visit_count = NA))\n```\n:::\n\n::: {#fig-portvisits .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot(visits_fishing, aes(x = month, y = port, fill = visit_count)) +\n  geom_tile(color = \"black\") +\n  scale_fill_gradient(low = \"azure1\", high = \"deepskyblue4\", na.value = \"white\") +\n  labs(title = \"Paackland and Haacklee more frequented by Fishing Vessels\",\n       x = \"Month\",\n       y = \"Port\",\n       subtitle = \"Based on the Harbor Records\",\n       fill = \"Number of Visits\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplot(visits_cargo, aes(x = month, y = port, fill = visit_count)) +\n  geom_tile(color = \"black\") +\n  scale_fill_gradient(low = \"azure1\", high = \"deepskyblue4\", na.value = \"white\") +\n  labs(title = \"Paackland and Lomark more frequented by Cargo Vessels\",\n       x = \"Month\",\n       y = \"Port\",\n       subtitle = \"Based on the Harbor Records\",\n       fill = \"Number of Visits\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![Port Visits by Fishing Vessels](takehomeex3_files/figure-html/fig-portvisits-1.png){#fig-portvisits-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Port Visits by Cargo Vessels](takehomeex3_files/figure-html/fig-portvisits-2.png){#fig-portvisits-2 width=672}\n:::\n\nBoth Fishing and Cargo Vessels frequent Paackland\n:::\n\n\n## 4.2 Wrangling the Transponder Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder <- mc2_edges %>%\n  filter(type == \"Event.TransportEvent.TransponderPing\") %>%\n  select(time, dwell, source, target) %>%\n  rename(\"id\" = \"target\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecting only the 'id' and 'vessel' columns from vessel_list\nvessel_subset <- vessel_list %>% \n  select(vessel, name, type) %>%\n  rename (id = vessel)\n\n# Performing left join on transponder and vessel_subset\ntransponder <- left_join(transponder, vessel_subset, by = \"id\")\n\n# Filtering only those Cargo and Fishing Vessels\n\ntransponder <- transponder %>%\n  filter(!is.na(type))\n```\n:::\n\n\n### 4.2.1 Visualising the Transponder Data\n\nFor us to better visualise the transponder data, we will split the data by months and also group it by the days of the week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder <- transponder %>%\n  mutate(month = month(time),\n         day = wday(time, label = TRUE))\n```\n:::\n\n\nWe want to also indicate if the vessel was within a port or not.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder <- transponder %>%\n  mutate(area = \n          ifelse (grepl(\"^City of\", source), \"Ports\", \n          ifelse(source %in% c(\"Cod Table\", \"Tuna Shelf\", \"Wrasse Beds\"), \"Fishing Grounds\",\n        ifelse(grepl(\"^Nav\", source), \"Nav Areas\",\n        ifelse(source %in% c(\"Don Limpet Preserve\", \"Nemo Reef\", \"Ghoti Preserve\"), \"Reserves\",\n        ifelse(grepl(\"^Exit\", source), \"Exit Areas\",\n                              \"Unknown\")))))) %>%\n  rename(\"location\" = \"source\",\n         \"vessel\" = \"name\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntransponder <- transponder %>%\n  arrange(vessel, time) %>%\n  group_by(vessel, location) %>%\n  mutate(\n    stay_start = time,\n    stay_end = time + dwell,\n    stay_duration = as.numeric(difftime(stay_end, stay_start, units = \"mins\"))\n  )\n\n# Filter out rows where location is NA or stay_duration is NA or negative\ntransponder <- transponder %>%\n  filter(!is.na(location) & !is.na(stay_duration) & stay_duration >= 0)\n```\n:::\n\n\n### 4.2.2 Looking at the areas that the vessels visited\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plotting\nggplot(transponder, aes(x = area, fill = type)) +\n  geom_bar(position = \"dodge\", stat = \"count\") +\n  labs(title = \"Cargo Vessels should not linger in Fishing Grounds or Reserves\",\n       x = \"Location Type\",\n       y = \"Count\",\n       fill = \"Vessel Type\",\n       subtitle = \"Fishing Vessels were present in Reserves as well\") +\n  scale_fill_manual(values = c(\"azure4\", \"lightskyblue4\")) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### 4.2.3 Vessels within Reserve Areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreserves_data <- transponder %>%\n  filter(area == \"Reserves\")\n\n# Count the number of unique vessels in the reserves area by vessel type\nunique_vessels_count <- reserves_data %>%\n  group_by(type) %>%\n  summarize(unique_vessels = n_distinct(vessel))\n\nmean_value <- mean(reserves_data$stay_duration)\nmedian_value <- median(reserves_data$stay_duration)\n\n# Plot a box plot of the dwell time in the reserves area\nboxplot <- ggplot(reserves_data, aes(x = type, y = stay_duration, fill = type)) +\n  geom_boxplot(fill = \"azure3\", color = \"lightskyblue4\", outlier.shape = 16, outlier.size = 2, outlier.colour = \"deepskyblue4\") +\n  geom_hline(yintercept = mean_value, color = \"azure4\", linetype = \"dashed\", size = 1) +  # Add mean line\n  geom_hline(yintercept = median_value, color = \"lightblue\", linetype = \"dotted\", size = 1) + \n  labs(title = \"Many Instances of Fishing Vessel Overspending Time in Reserves\",\n       x = NULL,\n       y = \"Stay Duration (mins) - Log Scale\",\n       subtitle = \"71 Cargo Vessels and 131 Fishing Vessels spent time in Reserves\") +\n  scale_y_log10() + \n  theme_minimal()\n\n# Print the number of unique vessels in the reserves area\nprint(unique_vessels_count)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  type          unique_vessels\n  <chr>                  <int>\n1 CargoVessel               71\n2 FishingVessel            131\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display the box plot\nprint(boxplot)\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n### 4.2.4 Cargo Vessels within Fishing Grounds\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the data for cargo vessels in fishing grounds\ncargo_fishing_data <- transponder %>%\n  filter(type == \"CargoVessel\" & area == \"Fishing Grounds\")\n\n# Calculate mean and median values\nmean_value <- mean(cargo_fishing_data$stay_duration)\nmedian_value <- median(cargo_fishing_data$stay_duration)\n\n# Plot a box plot of the dwell time for cargo vessels in fishing grounds\nggplot(cargo_fishing_data, aes(x = \"\", y = stay_duration)) +\n  geom_boxplot(fill = \"azure3\", color = \"lightskyblue4\") +\n  geom_hline(yintercept = mean_value, color = \"azure4\", linetype = \"dashed\", size = 1) +  # Add mean line\n  geom_hline(yintercept = median_value, color = \"lightblue\", linetype = \"dotted\", size = 1) +  \n  scale_y_log10() +\n  labs(title = \"Cargo Vessels spending more time in Fishing Grounds\",\n       x = NULL,\n       y = \"Stay Duration (min) (log scale)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessels_above_mean <- cargo_fishing_data %>%\n  filter(stay_duration > mean_value)\n\n# Count the number of unique vessels\nnum_vessels_above_mean <- n_distinct(vessels_above_mean$vessel)\n\n# Print the count\nprint(num_vessels_above_mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\nNotice that there is only 1 Cargo Vessel which stays in the fishing grounds above the mean duration - **Nautical Nomad** (**Tuna Shelf and Wrasse Beds**).\n\nWhy is this out of the norm? Typical cargo vessels could have only just transited across the fishing grounds, but if the cargo vessel stays beyond the transit time, they could be involved in illegal fishing activities, e.g. transshipment at sea as shown in the photo below.\n\n![](images/clipboard-2365353441.png){width=\"495\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(transponder, aes(x = stay_duration)) +\n  geom_histogram(binwidth = 100, fill = \"azure4\", color = \"black\") +\n  xlim (0, 5000) +\n  labs(title = \"Stay Duration is typically about 100 mins\", x = \"Stay Duration (mins)\", y = \"Frequency\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nWe will notice that there are vessels with dwell time = 0. This is so for the first row of data for each vessel, where it seems to initialise the starting of the location tracking of each vessel. However, there are also other times, where the dwell time was 0. Thinking that this could due to the vessel passing by the Port or could have traveled within the vicinity.\n\n\n::: {#fig-reservesvisits .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Summarize data to get the number of unique vessels in each reserve area\nvessels_reserve <- reserves_data %>%\n  group_by(location) %>%\n  summarise(unique_vessel_count = n_distinct(vessel))\n\nreserves_data <- reserves_data %>%\n  mutate (stay_duration_min = stay_duration/60)\n\n# Bar chart showing the number of unique vessels in different reserve areas\nggplot(vessels_reserve, aes(x = location, y = unique_vessel_count)) +\n  geom_bar(stat = \"identity\", fill = \"azure4\") +\n  labs(title = \"Nemo Reef saw the most vessels entering the reserve\",\n       x = \"Reserve Area\",\n       y = \"Number of Unique Vessels\") +\n  geom_text(aes(label = unique_vessel_count), vjust = -0.5, size = 3.5) +\n  theme_minimal()\n\n# Boxplot of stay_duration in different reserve areas\nggplot(reserves_data, aes(x = location, y = stay_duration_min)) +\n  geom_boxplot(fill = \"lightskyblue3\") +\n  labs(title = \"But Ghoti Preserve saw longer stay duration\",\n       x = \"Reserve Area\",\n       y = \"Stay Duration (mins)\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![Number of Unique Vessels entering the Reserves](takehomeex3_files/figure-html/fig-reservesvisits-1.png){#fig-reservesvisits-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Stay Duration (mins) of the Vessels](takehomeex3_files/figure-html/fig-reservesvisits-2.png){#fig-reservesvisits-2 width=672}\n:::\n\nVessels entering Reserves and their Stay Duration\n:::\n\n\n### 4.2.5 Vessels' Stay Duration at the Ports\n\n\n::: {.cell}\n\n```{.r .cell-code}\nport_data <- transponder %>%\n  filter(area == \"Ports\")\n\nmean_value <- mean(port_data$stay_duration)\nmedian_value <- median(port_data$stay_duration)\n\n# Plot a box plot of the dwell time in the reserves area\nboxplot <- ggplot(port_data, aes(x = type, y = stay_duration, fill = type)) +\n  geom_boxplot(fill = \"azure3\", color = \"lightskyblue4\", outlier.shape = 16, outlier.size = 2, outlier.colour = \"deepskyblue4\") +\n  geom_hline(yintercept = mean_value, color = \"azure4\", linetype = \"dashed\", size = 1) +  # Add mean line\n  geom_hline(yintercept = median_value, color = \"lightblue\", linetype = \"dotted\", size = 1) + \n  labs(title = \"Cargo Vessels spend less time at ports as compared to Fishing Vessels\",\n       x = NULL,\n       y = \"Stay Duration (mins) - Log Scale\",\n       subtitle = \"Average Time: 1985mins ; Median Time: 1675mins\") +\n  scale_y_log10() + \n  theme_minimal()\n\n# Display the box plot\nprint(boxplot)\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n## 4.3 Finding out the catches within the Vessel\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfishes <- mc2_nodes %>%\n  filter(type == \"Entity.Commodity.Fish\") %>%\n  select(\"name\", \"id\") %>%\n  rename(\"fishid\" = \"id\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nregion <- mc2_nodes %>%\n  filter(type == \"Entity.Location.Region\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nregion <- region %>%\n  separate_rows(fish_species_present, sep = \",\\\\s*\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nregion <- region %>%\n  left_join(fishes, by = c(\"fish_species_present\" = \"name\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npossible_catches <- region %>%\n  group_by(name) %>%\n  summarize(fishes = list(unique(fishid))) %>%\n  rename (\"location\" = \"name\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmapped_data <- transponder %>%\n  left_join(possible_catches, by = \"location\") %>%\n  arrange(id, time)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify port returns\nmapped_data$is_port_return <- grepl(\"^City of\", mapped_data$location)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncatch_summary <- mapped_data %>%\n  group_by(id, vessel, return_number = cumsum(is_port_return)) %>%\n  summarise(\n    start_port = first(location),\n    start_leg = first(time),\n    last_point_b4_port = last(location),\n    time_before_port = last(time),\n    time_check = first(time + dwell),\n    possible_catches = list(unique(unlist(fishes)))\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncatch_summary <- catch_summary %>%\n  mutate(end_port = lead(start_port, order_by = id),\n         time_into_port = lead(start_leg, order_by = id),\n         time_exit_port = lead(time_check, order_by = id))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall_catch_summary <- catch_summary %>%\n  unnest(possible_catches) %>%\n  rename (\"fish\" = \"possible_catches\",\n          \"port\" = \"end_port\",\n          \"name\" = \"vessel\")\n\nall_catch_summary <- all_catch_summary %>%\n  left_join(vessel_list, by = \"name\")\n\nall_catch_summary <- all_catch_summary %>%\n  left_join(fishes, by = c(\"fish\" = \"fishid\"))\n\nall_catch_summary <- all_catch_summary %>%\n  mutate(fishtype = sub(\"/.*\", \"\", name.y))\n\nall_catch_summary <- all_catch_summary %>%\n  select (name.x, port, time_into_port, time_exit_port, type, flag_country, tonnage, company, fishtype) %>%\n  rename (\"vessel\" = \"name.x\")\n\nall_catch_summary <- all_catch_summary %>%\n  mutate(month = month(time_into_port,label = TRUE))\n\ncatch_month_summary <- all_catch_summary %>%\n  group_by(month, fishtype) %>%\n  summarise(vessel_count = n_distinct(vessel))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(catch_month_summary, aes(x = month, y = fishtype, size = vessel_count)) +\n  geom_point(color = \"lightskyblue4\", alpha = 0.8) +\n  scale_size_continuous(range = c(1, 10)) +  # Adjust the range of the dot sizes\n  labs(title = \"Possible Fish Types Caught by Month\",\n       x = \"Month\",\n       y = \"Fish Type\",\n       subtitle = \"Based on the transponder data and their duration in the region\",\n       size = \"Number of Vessels\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\nHere, we attempt to match the catch summary with the harbor records, so that we exclude transponder pings that are not part of the harbor records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nharbor_summary <- catch_summary %>%\n  rowwise() %>%\n  mutate(\n    harbor = ifelse(any(harbor_records$name == vessel &\n                        harbor_records$port == end_port &\n                        harbor_records$date_added >= time_into_port),\n              \"Y\", \"N\")\n  ) %>%\n  ungroup()\n\nharbor_summary <- harbor_summary%>%\n  filter(harbor == \"Y\")\n```\n:::\n\n\n## 4.4 Wrangling with the Delivery Reports\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeliveryreports <- mc2_nodes %>%\n  filter(type == \"Entity.Document.DeliveryReport\")%>%\n  select(id, qty_tons, date) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot histogram\nggplot(deliveryreports, aes(x = qty_tons)) +\n  geom_histogram(binwidth = 5, fill = \"azure4\", color = \"black\") +\n  labs(title = \"There are 5307 delivery reports and the qty ranges from 0 to ~80tons\",\n       x = \"Quantity in Tons\",\n       y = \"Frequency\",\n       subtitle = \"315 values are 0 and below (to remove these data)\") +\n  theme_minimal() +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"deepskyblue4\", size = 1)\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_reports_0andbelow <- deliveryreports %>%\n  filter (qty_tons <= 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_reports <- deliveryreports %>%\n  filter (qty_tons > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_trans <- mc2_edges %>%\n  filter(type == \"Event.Transaction\") %>%\n  select(source, target, date_added) %>%\n  rename(\"id\" = \"source\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_trans$index <- ifelse(seq(nrow(delivery_trans)) %% 2 == 0, \"port\", \"fish\")\n\ndelivery_trans1 <- delivery_trans %>%\n  pivot_wider(names_from = index, values_from = target) %>%\n  rename (\"fishid\" = \"fish\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_reports <- delivery_reports %>%\n  left_join(delivery_trans1, by = \"id\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_reports <- delivery_reports %>%\n  left_join(fishes, by = \"fishid\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_reports <- delivery_reports %>%\n  mutate(fishtype = sub(\"/.*\", \"\", name))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_reports <- delivery_reports %>%\n  select(-fishid, -name, -date_added)\n```\n:::\n\n\n### 4.4.1 Deliveries by the Ports\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_labels <- c(\"City of Haacklee\" = \"Haacklee\", \n                   \"City of Himark\" = \"Himark\",\n                   \"City of Lomark\" = \"Lomark\",\n                   \"City of Paackland\" = \"Paackland\",\n                   \"City of South Paackland\" = \"S.Paackland\")\n\n\nggplot(delivery_reports, aes(x = port, y = qty_tons)) +\n  geom_boxplot(fill = \"azure4\", color = \"black\") +\n  labs(title = \"Similar Range in terms of Qty at the different Ports\",\n       x = \"Port\",\n       y = \"Quantity in Tons\") +\n  scale_x_discrete(labels = custom_labels) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n### 4.4.2 Fish Species not found in Fishing Grounds but Delivered at the Ports\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize the data to count the number of deliveries for each combination of port and fish type\ndelivery_summary <- delivery_reports %>%\n  group_by(port, fishtype) %>%\n  summarize(num_deliveries = n())\n\nggplot(delivery_summary, aes(x = port, y = fishtype, color = fishtype, size = num_deliveries)) +\n  geom_point(alpha = 1) +  # Adjust alpha for transparency if needed\n  labs(title = \"Sockfish, Salmon, Offidiaa and Helenaa are found at the Ports\",\n       x = NULL,\n       y = NULL,\n       size = \"Number of Deliveries\") +\n  scale_x_discrete(labels = custom_labels) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 11, face = \"bold\"))  \n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\nFrom the graph, we identified that **Sockfish, Salmon, Offidiaa and Helenaa** are found at the various ports. These are fishes that are not found in the fishing grounds, so identifying the vessels that offload these cargoes can help to narrow down IUU fishing.\n\n### 4.4.3 Monthly Delivery Trend by Fish Types\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndelivery_reports <- delivery_reports %>%\n  mutate (date = as.Date(date))\n\n# Extract month from the date\ndelivery_reports <- delivery_reports %>%\n  mutate(month = floor_date(date, \"month\"))\n\n# Summarize the data to count the number of deliveries for each combination of month and fish type\nmonthly_summary <- delivery_reports %>%\n  group_by(month, fishtype) %>%\n  summarize(num_deliveries = n())\n\n# Calculate the mean deliveries per fish type\nmean_deliveries <- monthly_summary %>%\n  group_by(fishtype) %>%\n  summarize(mean_deliveries = mean(num_deliveries))\n\n# Find the highest delivery per fish type\nmax_deliveries <- monthly_summary %>%\n  group_by(fishtype) %>%\n  filter(num_deliveries == max(num_deliveries))\n\n# Merge the summary data to add the mean delivery to each row\nmonthly_summary <- monthly_summary %>%\n  left_join(mean_deliveries, by = \"fishtype\")\n\n# Plot the monthly delivery\nggplot(monthly_summary, aes(x = month, y = num_deliveries, color = fishtype)) +\n  geom_line(size = 1) +  # Line plot for monthly trend\n  geom_point(size = 2) +  # Add points for each month\n  labs(title = \"Cod has the highest number of deliveries\",\n       x = \"Month\",\n       y = \"Number of Deliveries\",\n       subtitle = \"The four illegal fish species are delivered in certain months only\",\n       color = \"Fish Type\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 11, face = \"bold\"),\n        legend.position = \"none\") +\n  geom_text(data = max_deliveries, aes(label = num_deliveries), size = 2, vjust = -1) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  facet_wrap(~ fishtype)  \n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_summary <- delivery_reports %>%\n  group_by(month, fishtype, port) %>%\n  summarize(num_deliveries = n())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_summary <- filtered_summary %>%\n  filter(fishtype %in% c(\"Sockfish\", \"Salmon\", \"Offidiaa\", \"Helenaa\"))\n\n# Calculate the total deliveries across all ports for each month\ntotal_deliveries <- filtered_summary %>%\n  group_by(month, fishtype) %>%\n  summarise(num_deliveries = sum(num_deliveries)) %>%\n  mutate(port = \"Total\")  \n\n# Combine the filtered summary data with the total deliveries\ncombined_summary <- bind_rows(filtered_summary, total_deliveries)\n\n# Plot the monthly delivery\nggplot(combined_summary, aes(x = month, y = num_deliveries, color = fishtype)) +\n  geom_line(size = 1) +  # Line plot for monthly trend\n  geom_point(size = 2) +  # Add points for each month\n  labs(title = \"Paackland and Himark saw high delivery of the four fish species\",\n       x = \"Month\",\n       y = \"Number of Deliveries\",\n       subtitle = \"Salmon is mostly delivered through Haacklee and Paackland\",\n       color = \"Fish Type\") +\n  theme_minimal() +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b\", limits = as.Date(c(\"2035-02-01\", \"2035-11-31\"))) +\n  geom_text(data = combined_summary, aes(label = num_deliveries), size = 2, vjust = -1) + \n  theme(plot.title = element_text(size = 14, face = \"bold\"),\n        axis.text.x = element_text(size = 5)) +\n  facet_wrap(~ port)\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n## 4.5 Merging the Catch Summary Data with Delivery Reports\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpanded_catch_summary <- harbor_summary %>%\n  unnest(possible_catches) %>%\n  rename (\"fish\" = \"possible_catches\",\n          \"port\" = \"end_port\",\n          \"name\" = \"vessel\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexpanded_catch_summary <- expanded_catch_summary %>%\n  left_join(vessel_list, by = \"name\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexpanded_catch_summary <- expanded_catch_summary %>%\n  left_join(fishes, by = c(\"fish\" = \"fishid\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexpanded_catch_summary <- expanded_catch_summary %>%\n  mutate(fishtype = sub(\"/.*\", \"\", name.y))\n```\n:::\n\n\nClean up the summary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_catch_summary <- expanded_catch_summary %>%\n  select (name.x, port, time_into_port, time_exit_port, type, flag_country, tonnage, company, fishtype) %>%\n  rename (\"vessel\" = \"name.x\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatched_data <- final_catch_summary %>%\n  left_join(delivery_reports, by = c(\"port\", \"fishtype\")) %>%\n  filter(date >= time_into_port + 0.5 &\n         date <= time_exit_port + 1) %>%\n  mutate(cargo = ifelse(!is.na(id), as.character(id), \"N\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_cargo <- matched_data %>%\n  group_by(id) %>%\n  summarise(count = n())\n\nsummary_cargo_unique <- summary_cargo %>%\n  filter(count==1)\n```\n:::\n\n\n# 5. Visualising\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize the data to count the number of deliveries for each combination of port and fish type\nmatch_summary <- matched_data %>%\n  group_by(port, fishtype) %>%\n  summarize(num_deliveries = n())\n\nggplot(match_summary, aes(x = port, y = fishtype, color = fishtype, size = num_deliveries)) +\n  geom_point(alpha = 1) +  # Adjust alpha for transparency if needed\n  labs(title = \"Delivery of the 4 illegal species are not matched fully\",\n       x = NULL,\n       y = NULL,\n       subtitle = \"Perhaps the transponder is off when such deliveries are made\",\n       size = \"Number of Deliveries\") +\n  scale_x_discrete(labels = custom_labels) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 11, face = \"bold\"))  \n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\n## 5.1 Match with Harbor Records Instead\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatched_data_harbor <- harbor_records %>%\n  left_join(delivery_reports, by = c(\"port\")) %>%\n  filter(date >= date_added  &\n           date <= date_added + 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_cargo <- matched_data_harbor %>%\n  group_by(id) %>%\n  summarise(count = n())\n\nsummary_cargo_unique <- summary_cargo %>%\n  filter(count==1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize the data to count the number of deliveries for each combination of port and fish type\nmatch_summary <- matched_data_harbor %>%\n  group_by(port, fishtype) %>%\n  summarize(num_deliveries = n())\n\nggplot(match_summary, aes(x = port, y = fishtype, color = fishtype, size = num_deliveries)) +\n  geom_point(alpha = 1) +  # Adjust alpha for transparency if needed\n  labs(title = \"More records matched, with 1613 unique matches\",\n       x = NULL,\n       y = NULL,\n       subtitle = \"Matching with the harbor records only could be more accurate\",\n       size = \"Number of Deliveries\") +\n  scale_x_discrete(labels = custom_labels) +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 11, face = \"bold\")) \n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges <- matched_data_harbor %>%\n  select(vessel, id) %>%\n  distinct() %>%\n  filter(!is.na(vessel) & !is.na(id))\n\n# Create nodes for the network graph\nnodes <- data.frame(name = unique(c(edges$vessel, edges$id)))\n\n# Create igraph object\ngraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)\n```\n:::\n\n\nTrying to plot using network graphs - but this is a mess - need to tidy up!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the network graph\nggraph(graph, layout = \"fr\") + \n  geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)), arrow = arrow(type = \"closed\", length = unit(4, \"mm\")), color = \"gray\") +\n  geom_node_point(aes(color = name %in% edges$vessel), size = 5) + \n  geom_node_text(aes(label = name), vjust = 1.5, size = 3) +\n  labs(title = \"Network Graph of Vessels and Linked Cargo\") +\n  theme_void() +\n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-83-1.png){width=672}\n:::\n:::\n\n\n# 6. Qn 2 - Illegal Activities for SouthSeafood Express Corp (SEC)\n\n## 6.1 Identify Vessels belonging to SEC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSEC_vessel <- vessel_list %>%\n  filter (company == \"SouthSeafood Express Corp\")\n```\n:::\n\n\nWe found only 2 vessels linked to SEC:\n\n-   Snapper Snatcher (snappersnatcher7be)- a small 100 ton vessel\n\n-   Roach Robber (roachrobberdb6)- a 11700 ton bigger vessel\n\n## 6.2 Introducing the Geospatial Data to help in visualising\n\nImporting the geographical data in geojson file format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusGeography = st_read(\"data/OceanusGeography.geojson\") %>%\n  st_transform(crs = 4326)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `OceanusGeography' from data source \n  `C:\\zjjgithubb\\ISSS608VA\\TakehomeEx\\ex03\\data\\OceanusGeography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nVisualising the geojson:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = OceanusGeography) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-86-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(OceanusGeography, \"data/rds/OceanusGeography.rds\")\n```\n:::\n\n\n## 6.3 **Importing Geographical Data in ESRI shapefile format**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations <- st_read(dsn = \"data/shp\",\n  layer = \"Oceanus Geography\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `C:\\zjjgithubb\\ISSS608VA\\TakehomeEx\\ex03\\data\\shp' using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = OceanusLocations) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(OceanusLocations, \"data/rds/OceanusLocations.rds\")\n```\n:::\n\n\n## 6.4 Data Prep for Vessel Movement Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- mc2_edges %>%\n  filter(event3 == \"TransponderPing\") %>%\n  select(time, dwell, source, target)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(vessel_movement_data$source)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"City of Haacklee\"        \"City of Lomark\"         \n [3] \"City of Himark\"          \"City of Paackland\"      \n [5] \"City of South Paackland\" \"City of Port Grove\"     \n [7] \"Exit West\"               \"Nav 3\"                  \n [9] \"Nav D\"                   \"Nav B\"                  \n[11] \"Nav A\"                   \"Nav C\"                  \n[13] \"Nav 2\"                   \"Nav 1\"                  \n[15] \"Exit East\"               \"Exit South\"             \n[17] \"Exit North\"              \"Nav E\"                  \n[19] \"Cod Table\"               \"Ghoti Preserve\"         \n[21] \"Wrasse Beds\"             \"Nemo Reef\"              \n[23] \"Don Limpet Preserve\"     \"Tuna Shelf\"             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(OceanusLocations$Name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Haacklee\"            \"Port Grove\"          \"Lomark\"             \n [4] \"Himark\"              \"Paackland\"           \"Centralia\"          \n [7] \"South Paackland\"     \"Exit West\"           \"Nav 3\"              \n[10] \"Nav D\"               \"Nav B\"               \"Nav A\"              \n[13] \"Nav C\"               \"Nav 2\"               \"Nav 1\"              \n[16] \"Exit East\"           \"Exit South\"          \"Exit North\"         \n[19] \"Nav E\"               \"Don Limpet Preserve\" \"Tuna Shelf\"         \n[22] \"Makara Shoal\"        \"Silent Sanctuary\"    \"Cod Table\"          \n[25] \"Ghoti Preserve\"      \"Wrasse Beds\"         \"Nemo Reef\"          \n```\n\n\n:::\n:::\n\n\nWe note that the vessel movement data's name of the location did not match the OceanusLocations. So we need to match.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- vessel_movement_data%>%\n  mutate(source = gsub(\"^City of\", \"\", source)) %>%\n  mutate(source = gsub(\"^\\\\s+\", \"\", source))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(OceanusLocations)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations_df <- OceanusLocations %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations_df$XCOORD <- coords[, \"X\"]\nOceanusLocations_df$YCOORD <- coords[, \"Y\"]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations_df <- OceanusLocations_df %>%\n  select(Name, X.Kind, XCOORD, YCOORD) %>%\n  rename(Loc_Type = X.Kind)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- vessel_movement_data %>%\n  left_join(OceanusLocations_df,\n            by = c(\"source\" = \"Name\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(vessel_movement_data, \"data/rds/vessel_movement_data.rds\")\n```\n:::\n\n\n## 6.5 Visualising the Trajectories of Snappy Snatcher and Roach Robber\n\n### 6.5.1 Transforming the vessel movement data to a path\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- read_rds(\"data/rds/vessel_movement_data.rds\")\n\nOceanusGeography <- read_rds(\"data/rds/OceanusGeography.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_data %>%\n  st_as_sf(coords = c(\"XCOORD\", \"YCOORD\"), \n           crs = 4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_sf %>%\n  arrange(target, time)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory <- vessel_movement_sf %>%\n  group_by(target) %>%\n  summarize(do_union = FALSE) %>%\n  st_cast(\"LINESTRING\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_selected <- vessel_trajectory %>%\n  filter(target == \"snappersnatcher7be\")\n```\n:::\n\n\n### 6.5.2 Calculating the Dwell Time (mins) at each point\n\nFor now, we will look at the total amount of time that each vessel has spent at each location. We will sum the dwell time (converted to mins) at each location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoints_data <- vessel_movement_sf %>%\n  filter (target == \"snappersnatcher7be\") %>%\n  group_by(target, geometry) %>%\n  summarize(dwell_time = sum(dwell)/60)\n\n# Ensure the geometry column is retained as a 'geometry' class\nst_geometry(points_data) <- points_data$geometry\n```\n:::\n\n\nSubsequently, it will be richer if we are able to plot the data by months. This would help us better visualise and compare the movement of the vessels.\n\n### 6.5.3 Path of Snapper Snatcher and Roach Robber\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_robber <- vessel_trajectory %>%\n  filter(target == \"roachrobberdb6\")\n\npoints_data_robber <- vessel_movement_sf %>%\n  filter (target == \"roachrobberdb6\") %>%\n  group_by(target, geometry) %>%\n  summarize(dwell_time = sum(dwell)/60)\n\n# Ensure the geometry column is retained as a 'geometry' class\nst_geometry(points_data_robber) <- points_data_robber$geometry\n```\n:::\n\n::: {#fig-SECVesselsPath .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf_text(data = OceanusGeography, aes(label = Name), nudge_y = 0.1, size = 2) + \n  geom_sf(data = vessel_trajectory_selected, \n          color = \"blue\",  # Set the color of the trajectory\n          linewidth = 1.2, alpha = 0.5) +\n  geom_point(data = points_data, \n             aes(x = st_coordinates(geometry)[, \"X\"], \n                 y = st_coordinates(geometry)[, \"Y\"], \n                 size = dwell_time, color = dwell_time), \n             alpha = 0.7) +  # Add points with size based on dwell time\n  scale_size_continuous(name = \"Dwell Time (mins)\") +  \n  scale_color_gradient(name = \"Dwell Time (mins)\", low = \"lavender\", high = \"mediumpurple4\") +  \n  theme_minimal() +\n  labs(title = \"Snapper Snatcher spent substantial time within Ghoti Preserve\", \n       x = \"Longitude\", y = \"Latitude\")\n\n\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf_text(data = OceanusGeography, aes(label = Name), nudge_y = 0.1, size = 2) + \n  geom_sf(data = vessel_trajectory_robber, \n          color = \"blue\",  # Set the color of the trajectory\n          linewidth = 1.2, alpha = 0.5) +\n  geom_point(data = points_data_robber, \n             aes(x = st_coordinates(geometry)[, \"X\"], \n                 y = st_coordinates(geometry)[, \"Y\"], \n                 size = dwell_time, color = dwell_time), \n             alpha = 0.7) +  # Add points with size based on dwell time\n  scale_size_continuous(name = \"Dwell Time (mins)\") +  \n  scale_color_gradient(name = \"Dwell Time (mins)\", low = \"lavender\", high = \"mediumpurple4\") +  \n  theme_minimal() +\n  labs(title = \"Roach Robber spent time mostly at Himark, Wrasse Beds and Nav C\", \n       x = \"Longitude\", y = \"Latitude\")\n```\n\n::: {.cell-output-display}\n![Path of Snapper Snatcher](takehomeex3_files/figure-html/fig-SECVesselsPath-1.png){#fig-SECVesselsPath-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Patch of Roach Robber](takehomeex3_files/figure-html/fig-SECVesselsPath-2.png){#fig-SECVesselsPath-2 width=672}\n:::\n\nSnapper Snatcher lingered in Ghoti Preserve\n:::\n\n\nSnapper Snatcher also **spent time at Exit East - they are likely to engage in Deep Sea Fishing** there (activities tied to the Exit Areas). This is also likely where they can fish for Salmon (assumption) - given that Salmon was not found in the other fishing grounds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_path <- bind_rows(vessel_trajectory_selected, vessel_trajectory_robber)\n\npoints_data_combined <- bind_rows(points_data, points_data_robber)\n\nwrapped_subtitle <- str_wrap(\"Transhipment could have occured at these locations\", width = 60)\n\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf_text(data = OceanusGeography, aes(label = Name), nudge_y = 0.1, size = 2) + \n  geom_sf(data = combined_path, aes(color = target), linewidth = 1.2, alpha = 0.2) +\n  \n  scale_color_manual(name = \"Path\", \n                     values = c(\"snappersnatcher7be\" = \"blue\", \"roachrobberdb6\" = \"red\")) +\n  \n  geom_point(data = points_data_combined, aes(x = st_coordinates(geometry)[, \"X\"], \n                                              y = st_coordinates(geometry)[, \"Y\"], \n                                              size = dwell_time), \n             alpha = 0.7) +  \n   \n  scale_size_continuous(name = \"Dwell Time (mins)\") +\n  \n  theme_minimal() +\n  labs(title = \"Common Points at Lomark, Wrasse Beds and Nav C\", \n       subtitle = wrapped_subtitle, \n       x = \"Longitude\", y = \"Latitude\")\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-109-1.png){width=672}\n:::\n:::\n\n\n### 6.5.4 When and Where did the illegal fishing took place?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSEC_catches <- all_catch_summary %>%\n  filter (vessel %in% c(\"Snapper Snatcher\", \"Roach Robber\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSEC_catch_summary <- SEC_catches %>%\n  group_by(vessel, fishtype) %>%\n  summarise(fishtype_count = n()) %>%\n  ungroup()\n\nSEC_catch_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 3\n  vessel           fishtype fishtype_count\n  <chr>            <chr>             <int>\n1 Roach Robber     Beauvoir             22\n2 Roach Robber     Birdseye             22\n3 Roach Robber     Wrasse               22\n4 Snapper Snatcher Beauvoir             18\n5 Snapper Snatcher Birdseye             18\n6 Snapper Snatcher Cod                  16\n7 Snapper Snatcher Helenaa               4\n8 Snapper Snatcher Offidiaa              4\n9 Snapper Snatcher Wrasse               12\n```\n\n\n:::\n:::\n\n\nFrom the table above, we would notice that because Snapper Snatcher spent time in the **Ghoti Preserve**, it would like have caught species like **Helenaa and Offidiaa** which are species that are found in the preserve only. These data is collated based on the vessel's transponder ping location.\n\nNext we will try to find out when did such fishing took place based on the transponder data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the location and vessel of interest\nlocation_of_interest <- \"Ghoti Preserve\"\nvessel_of_interest <- \"Snapper Snatcher\"\n\n# Filter data for the specific location and vessel\ntrespassing_dates <- transponder %>%\n  filter(location == location_of_interest, vessel == vessel_of_interest) %>%\n  select(time, month, day) \n\nprint(trespassing_dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n# Groups:   vessel, location [1]\n  vessel           location       time                month day  \n  <chr>            <chr>          <dttm>              <dbl> <ord>\n1 Snapper Snatcher Ghoti Preserve 2035-02-02 05:39:59     2 Fri  \n2 Snapper Snatcher Ghoti Preserve 2035-02-09 05:49:11     2 Fri  \n3 Snapper Snatcher Ghoti Preserve 2035-02-16 07:02:09     2 Fri  \n4 Snapper Snatcher Ghoti Preserve 2035-03-15 05:46:02     3 Thu  \n```\n\n\n:::\n:::\n\n\nWe note from the data that the activities took place in **Feb and Mar** - however, this did not correspond to any cargo delivery reports from the earlier data.\n\nWe will also check the other vessels that spent time in Ghoti Preserve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nother_trespassers <- transponder %>%\n  filter(location == \"Ghoti Preserve\") %>%\n  select(vessel, time, month, day, stay_duration, location) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmonthly_summary <- other_trespassers %>%\n  group_by(month) %>%\n  summarise(\n    unique_vessels = n_distinct(vessel),\n    mean_stay_duration = mean(stay_duration/360, na.rm = TRUE)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(monthly_summary, aes(x = month)) +\n  geom_bar(aes(y = unique_vessels), stat = \"identity\", fill = \"azure4\") +\n  geom_line(aes(y = mean_stay_duration * 10), color = \"lightpink\", size = 1) +  # Scale mean stay duration for visibility\n  geom_point(aes(y = mean_stay_duration * 10), color = \"red\", size = 2) +  # Add points for mean stay duration\n  scale_y_continuous(\n    name = \"Number of Unique Vessels\",\n    sec.axis = sec_axis(~./10, name = \"Mean Stay Duration (hours)\")  # Adjust secondary axis scale\n  ) +\n  labs(title = \"Monthly Trespass into Ghoti Preserve\",\n       x = \"Month\",\n       y = \"Number of Unique Vessels\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-115-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert month and day to Date object\nother_trespassers <- other_trespassers %>%\n  mutate (month = month(time, label = TRUE))\n\nother_trespassers <- other_trespassers %>%\n  mutate (stay_duration = stay_duration/60)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the boxplot\nggplot(other_trespassers, aes(x = month, y = stay_duration)) +\n  geom_boxplot() +\n  labs(title = \"Box plot of Duration in Ghoti Preserve\",\n       x = \"Month\",\n       y = \"Stay Duration (mins)\",\n       subtitle = \"Mean time spent dropped in Apr to Jul; Increased from Aug to Nov\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-117-1.png){width=672}\n:::\n:::\n\n\nFrom the charts, I postulate that after Snapper Snatcher was caught in May, the other vessels chose to spend lesser time in Ghoti Preserve, but their time in the Preserve subsequently picked up again from Aug onwards. This corresponds to the delivery pattern of **Helenaa and Offidiaa**, where their deliveries started to increase from Sep onwards. That said - we may also need to note the species habitual patterns and whether are they present in Ghoti Preserve during these months. (Tried to google these species, but seems like they are fictitious).\n\n### 6.5.6 Other Vessels Movement Path\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_carp <- vessel_trajectory %>%\n  filter(target == \"carpcapturer993\")\n\npoints_data_carp <- vessel_movement_sf %>%\n  filter (target == \"carpcapturer993\") %>%\n  group_by(target, geometry) %>%\n  summarize(dwell_time = sum(dwell)/60)\n\n# Ensure the geometry column is retained as a 'geometry' class\nst_geometry(points_data_carp) <- points_data_carp$geometry\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf_text(data = OceanusGeography, aes(label = Name), nudge_y = 0.1, size = 2) + \n  geom_sf(data = vessel_trajectory_carp, \n          color = \"blue\",  # Set the color of the trajectory\n          linewidth = 1.2, alpha = 0.5) +\n  geom_point(data = points_data_carp, \n             aes(x = st_coordinates(geometry)[, \"X\"], \n                 y = st_coordinates(geometry)[, \"Y\"], \n                 size = dwell_time, color = dwell_time), \n             alpha = 0.7) +  # Add points with size based on dwell time\n  scale_size_continuous(name = \"Dwell Time (mins)\") +  \n  scale_color_gradient(name = \"Dwell Time (mins)\", low = \"lavender\", high = \"mediumpurple4\") +  \n  theme_minimal() +\n  labs(title = \"Carp Capturer spent time at Himark, Wrasse Beds and Nav C\", \n       subtitle = \"Dwell Time at Nav C seems high - can investigate further\", \n       x = \"Longitude\", y = \"Latitude\")\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-119-1.png){width=672}\n:::\n:::\n\n\nCarp Capturer seems like a fishing vessel that engages only in legal fishing activities, with no time spent in the reserves and mostly shuttling between the ports, navigation lines and the fishing grounds.\n\n# 7. Qn 3 - Workflow to discover other illegal fishing\n\nWe have earlier identified that vessels **spending time in the reserve areas** could be suspected of illegal fishing, and **spending extra time at Nav C** could also be indicators of transshipment activities.\n\nWe can first look at those vessels spending time at Ghoti Preserve and first look at vessels spending more time than the mean time by Snapper Snatcher (around 77 mins).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghoti_trespassers <- other_trespassers %>%\n  group_by(vessel, month) %>%\n  summarize(mean_stay_duration = mean(stay_duration))\n\n# Filter the vessels based on the 75th percentile\ntop_vessels <- ghoti_trespassers %>%\n  group_by(vessel) %>%\n  filter(mean_stay_duration >= 77)\n\ntop_vessels <- top_vessels %>%\n  complete(month, fill = list(mean_stay_duration = NA))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top_vessels, aes(x = month, y = vessel, fill = mean_stay_duration)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"deepskyblue4\", na.value = \"ghostwhite\") +  # Adjust colors as needed\n  labs(title = \"Heatmap of Vessels in Ghoti Preserve by Month\",\n       x = \"Month\",\n       y = \"Vessel\",\n       fill = \"Mean Stay(mins)\",\n       subtitle = \"To identify key vessels of interest - e.g. Gurnard Grabber\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-121-1.png){width=672}\n:::\n:::\n\n\n## 7.1 Plot the Path of Gurnard Grabber\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_gurnard <- vessel_trajectory %>%\n  filter(target == \"gurnardgrabberd9a\")\n\npoints_data_gurnard <- vessel_movement_sf %>%\n  filter (target == \"gurnardgrabberd9a\") %>%\n  group_by(target, geometry) %>%\n  summarize(dwell_time = sum(dwell)/60)\n\n# Ensure the geometry column is retained as a 'geometry' class\nst_geometry(points_data_gurnard) <- points_data_gurnard$geometry\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf_text(data = OceanusGeography, aes(label = Name), nudge_y = 0.1, size = 2) + \n  geom_sf(data = vessel_trajectory_gurnard, \n          color = \"blue\",  # Set the color of the trajectory\n          linewidth = 1.2, alpha = 0.5) +\n  geom_point(data = points_data_gurnard, \n             aes(x = st_coordinates(geometry)[, \"X\"], \n                 y = st_coordinates(geometry)[, \"Y\"], \n                 size = dwell_time, color = dwell_time), \n             alpha = 1) +  # Add points with size based on dwell time\n  scale_size_continuous(name = \"Dwell Time (mins)\") +  \n  scale_color_gradient(name = \"Dwell Time (mins)\", low = \"mediumpurple1\", high = \"mediumpurple4\") +  \n  theme_minimal() +\n  labs(title = \"Gurnard Grabber - at Ghoti Preserve, Nav points and Exit East\", \n       subtitle = \"Dwell Time at these areas seem high - can investigate further\", \n       x = \"Longitude\", y = \"Latitude\")\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-123-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngurnard <- other_trespassers %>%\n  filter(vessel == \"Gurnard Grabber\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gurnard, aes(x = time, y = stay_duration)) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.9), fill = \"azure4\") +\n  geom_text(aes(label = round(stay_duration, 2)), position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +  # Add labels above the bars\n  labs(title = \"Gurnard Grabber's stay in Ghoti Preserve\",\n       x = \"Month\",\n       y = \"Average Stay Duration\",\n       subtitle = \"Long duration in Oct corresponds to higher deliveries in Ports\", \n       fill = \"Month\") +\n  ylim (0,170) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-125-1.png){width=672}\n:::\n:::\n\n\n## 7.2 Investigate vessels from the same company\n\nAfter plotting the path, we can investigate further based on the vessels from the same company, e.g. in this case **Schmidt Ltd**, with another vessel, **Black Bullhead Bandit** (blackbullheadbandit801), similarly by plotting the paths, can checking the dwell times of the vessels at the suspected areas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_bandit <- vessel_trajectory %>%\n  filter(target == \"blackbullheadbandit801\")\n\npoints_data_bandit <- vessel_movement_sf %>%\n  filter (target == \"blackbullheadbandit801\") %>%\n  group_by(target, geometry) %>%\n  summarize(dwell_time = sum(dwell)/60)\n\n# Ensure the geometry column is retained as a 'geometry' class\nst_geometry(points_data_bandit) <- points_data_bandit$geometry\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined_path_gb <- bind_rows(vessel_trajectory_gurnard, vessel_trajectory_bandit)\n\npoints_data_gb <- bind_rows(points_data_gurnard, points_data_bandit)\n\nwrapped_subtitle <- str_wrap(\"Transshipment could have occured at these locations\", width = 60)\n\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf_text(data = OceanusGeography, aes(label = Name), nudge_y = 0.1, size = 2) + \n  geom_sf(data = combined_path_gb, aes(color = target), linewidth = 1.2, alpha = 0.2) +\n  \n  scale_color_manual(name = \"Path\", \n                     values = c(\"gurnardgrabberd9a\" = \"blue\", \"blackbullheadbandit801\" = \"red\")) +\n  \n  geom_point(data = points_data_gb, aes(x = st_coordinates(geometry)[, \"X\"], \n                                              y = st_coordinates(geometry)[, \"Y\"], \n                                              size = dwell_time), \n             alpha = 0.7) +  \n   \n  scale_size_continuous(name = \"Dwell Time (mins)\") +\n  \n  theme_minimal() +\n  labs(title = \"Common Points at East of Oceanus\", \n       subtitle = wrapped_subtitle, \n       x = \"Longitude\", y = \"Latitude\")\n```\n\n::: {.cell-output-display}\n![](takehomeex3_files/figure-html/unnamed-chunk-127-1.png){width=672}\n:::\n:::\n\n\n# 8. References\n\nRefer to the kickstarter provided for by Dr T.S. Kam:\n\n-   [Kickstarter 2: Working with Graph Data](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter2)\n\n-   [Kickstarter 3: Working with Geographic Data](https://isss608-ay2023-24apr.netlify.app/vast/kickstarter3)\n\n-   [Transhipment: Issues and Responses in the FCWC Region](https://stopillegalfishing.com/publications/transhipment-issues-and-responses-in-the-fcwc-region/#:~:text=Transhipment%3A%20Issues%20and%20Responses%20in%20the%20FCWC%20Region%20aims%20to,and%20the%20trade%20in%20fish.)\n\n# \n",
    "supporting": [
      "takehomeex3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}