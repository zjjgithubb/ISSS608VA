[
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html",
    "href": "TakehomeEx/ex01/takehomeex1.html",
    "title": "Take Home Ex 1",
    "section": "",
    "text": "Creating data visualisation beyond default\n\n\nAssuming the role of a graphical editor of a median company, you are requested to prepare minimum two and maximum three data visualisation to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024."
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#the-task",
    "href": "TakehomeEx/ex01/takehomeex1.html#the-task",
    "title": "Take Home Ex 1",
    "section": "",
    "text": "Assuming the role of a graphical editor of a median company, you are requested to prepare minimum two and maximum three data visualisation to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024."
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#loading-the-required-packages",
    "href": "TakehomeEx/ex01/takehomeex1.html#loading-the-required-packages",
    "title": "Take Home Ex 1",
    "section": "1.1 Loading the Required Packages",
    "text": "1.1 Loading the Required Packages\n\npacman::p_load(plotly, patchwork, hrbrthemes, ggridges, ggrepel, tidyverse, ggpubr, scales, colorspace, ggdist)"
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#examining-and-preparing-the-data",
    "href": "TakehomeEx/ex01/takehomeex1.html#examining-and-preparing-the-data",
    "title": "Take Home Ex 1",
    "section": "1.2 Examining and Preparing the Data",
    "text": "1.2 Examining and Preparing the Data\nWe first read the 5 .csv files provided. These are separate csv files containing data of each of the quarters from 2023 to Mar 2024.\nAs such, we will use the following code chunk to import the data and combine them into a single dataset.\n\ndf &lt;- list.files(path=\"data/csv\", full.names = TRUE) %&gt;% \n  lapply(read_csv) %&gt;% \n  bind_rows \n\nAfter combining the dataset into df, we will also extract the Sale Date and code it accordingly to the quarters. E.g. Jan to Mar 23 will be Q1Y23 and so on.\n\ndf &lt;- df %&gt;%\n  mutate(sale_date = as.Date(`Sale Date`, format = \"%d %b %Y\"),  \n         quarter = paste0(\"Q\", quarter(sale_date), \"Y\", format(sale_date, \"%y\")))%&gt;%\n  mutate(\n    quarter = factor(quarter, levels = c(\"Q1Y23\", \"Q2Y23\", \"Q3Y23\", \"Q4Y23\", \"Q1Y24\"))\n  )\n\nI also like to rename some of the columns headers so that it is easier to type into the codes later, especially removing the space in between.\n\nrealis2324 &lt;- df %&gt;% \n  rename(\n    unit_psm = 'Unit Price ($ PSM)',\n    unit_area = 'Area (SQM)',\n    property_type = `Property Type`,\n    sale_type = `Type of Sale`,\n    planning_region = `Planning Region`,\n    planning_area = `Planning Area`,\n    trans_price = `Transacted Price ($)`,\n    project = `Project Name`\n      )"
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#check-data-for-duplicated-missing-values",
    "href": "TakehomeEx/ex01/takehomeex1.html#check-data-for-duplicated-missing-values",
    "title": "Take Home Ex 1",
    "section": "1.3 Check Data for Duplicated, Missing Values",
    "text": "1.3 Check Data for Duplicated, Missing Values\nFirst, we check if there are any missing values in the dataset.\n\n# Check for missing values\nmissing_values &lt;- realis2324 %&gt;%\n  summarise_all(~ sum(is.na(.)))\n\n# Display columns with missing values\nprint(missing_values)\n\n# A tibble: 1 × 23\n  project trans_price `Area (SQFT)` `Unit Price ($ PSF)` `Sale Date` Address\n    &lt;int&gt;       &lt;int&gt;         &lt;int&gt;                &lt;int&gt;       &lt;int&gt;   &lt;int&gt;\n1       0           0             0                    0           0       0\n# ℹ 17 more variables: sale_type &lt;int&gt;, `Type of Area` &lt;int&gt;, unit_area &lt;int&gt;,\n#   unit_psm &lt;int&gt;, `Nett Price($)` &lt;int&gt;, property_type &lt;int&gt;,\n#   `Number of Units` &lt;int&gt;, Tenure &lt;int&gt;, `Completion Date` &lt;int&gt;,\n#   `Purchaser Address Indicator` &lt;int&gt;, `Postal Code` &lt;int&gt;,\n#   `Postal District` &lt;int&gt;, `Postal Sector` &lt;int&gt;, planning_region &lt;int&gt;,\n#   planning_area &lt;int&gt;, sale_date &lt;int&gt;, quarter &lt;int&gt;\n\n\nAnd also for any duplicated values.\n\n# Check for duplicate rows\nduplicate_rows &lt;- realis2324 %&gt;%\n  filter(duplicated(.))\n\n# Display duplicate rows\nprint(duplicate_rows)\n\n# A tibble: 0 × 23\n# ℹ 23 variables: project &lt;chr&gt;, trans_price &lt;dbl&gt;, Area (SQFT) &lt;dbl&gt;,\n#   Unit Price ($ PSF) &lt;dbl&gt;, Sale Date &lt;chr&gt;, Address &lt;chr&gt;, sale_type &lt;chr&gt;,\n#   Type of Area &lt;chr&gt;, unit_area &lt;dbl&gt;, unit_psm &lt;dbl&gt;, Nett Price($) &lt;chr&gt;,\n#   property_type &lt;chr&gt;, Number of Units &lt;dbl&gt;, Tenure &lt;chr&gt;,\n#   Completion Date &lt;chr&gt;, Purchaser Address Indicator &lt;chr&gt;,\n#   Postal Code &lt;chr&gt;, Postal District &lt;chr&gt;, Postal Sector &lt;chr&gt;,\n#   planning_region &lt;chr&gt;, planning_area &lt;chr&gt;, sale_date &lt;date&gt;, …"
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#focusing-on-individual-sales-i.e.-remove-en-bloc",
    "href": "TakehomeEx/ex01/takehomeex1.html#focusing-on-individual-sales-i.e.-remove-en-bloc",
    "title": "Take Home Ex 1",
    "section": "1.4 Focusing on Individual Sales (i.e. Remove En Bloc)",
    "text": "1.4 Focusing on Individual Sales (i.e. Remove En Bloc)\nBecause we are looking at transaction data of the properties, we also want to check the number of units sold in each row is equal to 1. Because any sales with more than 1 unit can indicate other sales types, like en-bloc etc.\n\nall_units_equal_to_1 &lt;- all(realis2324$`Number of Units` == 1)\n\nif (all_units_equal_to_1) {\n  print(\"All values in the 'Number of Units' column are equal to 1.\")\n} else {\n  # Print values above 1\n  units_above_1 &lt;- realis2324 %&gt;%\n    filter(`Number of Units` &gt; 1)\n\n  print(\"Values in the 'Number of Units' column above 1:\")\n  print(units_above_1)\n}\n\n[1] \"Values in the 'Number of Units' column above 1:\"\n# A tibble: 12 × 23\n   project    trans_price `Area (SQFT)` `Unit Price ($ PSF)` `Sale Date` Address\n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;                &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;  \n 1 N.A.          32200000        14123.                 2280 02 May 2023 \"29,29…\n 2 KEW LODGE     66800000        25177                  2653 23 May 2023 \"34,34…\n 3 N.A.           6150000         4342.                 1416 19 Jun 2023 \"87 LO…\n 4 N.A.          10600000         6747.                 1571 26 Jun 2023 \"1,1A,…\n 5 CLAYMORE …     7000000         4209.                 1663 27 Feb 2024 \"6 CLA…\n 6 BAGNALL C…   115280000        68491.                 1683 04 Jan 2023 \"813,8…\n 7 MONDO MAN…     6280000         5490.                 1144 18 Jan 2023 \"543,5…\n 8 MEYER PARK   392180000       144883.                 2707 09 Feb 2023 \"81,83…\n 9 N.A.          61080008        32149.                 1900 21 Mar 2023 \"14,14…\n10 EAST VIEW…     6100000         8338.                  732 17 Jul 2023 \"43,45…\n11 N.A.           8000000         3659.                 2187 28 Jul 2023 \"4,6 L…\n12 KARTAR AP…    18000000         6964.                 2585 11 Oct 2023 \"41A,4…\n# ℹ 17 more variables: sale_type &lt;chr&gt;, `Type of Area` &lt;chr&gt;, unit_area &lt;dbl&gt;,\n#   unit_psm &lt;dbl&gt;, `Nett Price($)` &lt;chr&gt;, property_type &lt;chr&gt;,\n#   `Number of Units` &lt;dbl&gt;, Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;,\n#   `Purchaser Address Indicator` &lt;chr&gt;, `Postal Code` &lt;chr&gt;,\n#   `Postal District` &lt;chr&gt;, `Postal Sector` &lt;chr&gt;, planning_region &lt;chr&gt;,\n#   planning_area &lt;chr&gt;, sale_date &lt;date&gt;, quarter &lt;fct&gt;\n\n\nWe have 12 rows with the number of units &gt; 1. Given that we are not able to divide the sales data accordingly by the number of units etc, we will remove these data instead.\n\nrealis2324_cleaned &lt;- realis2324 %&gt;%\n  filter(`Number of Units` &lt;= 1)"
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#reviewing-the-property-type",
    "href": "TakehomeEx/ex01/takehomeex1.html#reviewing-the-property-type",
    "title": "Take Home Ex 1",
    "section": "1.5 Reviewing the Property Type",
    "text": "1.5 Reviewing the Property Type\nWhen we look at the data, we can see that there are five property types indicated:\n\nApartment\nCondominium\nDetached House\nExecutive Condominium\nSemi-Detached House\nTerrace House\n\nExecutive Condominium is a mix between public and private housing so we will leave it as such in case we want to exclude it from further analysis. However, when we look at Apartment and Condominium, we realised that there is not much difference; e.g. one of the Apartment is Lentor Modern which is actually listed as a Condominium on its website. For the purpose of our study, we can therefore combine apartment and condominium as one same group - condo.\n\nrealis2324_cleaned$property_type &lt;- ifelse(realis2324_cleaned$property_type == \"Apartment\", \"Condominium\", realis2324_cleaned$property_type)\n\nrealis2324_cleaned &lt;- realis2324_cleaned %&gt;%\n  mutate(\n    property_type = factor(property_type, levels = c(\"Condominium\", \"Executive Condominium\", \"Terrace House\", \"Semi-Detached House\", \"Detached House\"))\n  )"
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#writing-the-data-to-rds-file",
    "href": "TakehomeEx/ex01/takehomeex1.html#writing-the-data-to-rds-file",
    "title": "Take Home Ex 1",
    "section": "1.6 Writing the data to rds file",
    "text": "1.6 Writing the data to rds file\nWe will then write the data into a rds format.\n\nwrite_rds(realis2324_cleaned, \"data/rds/realis2324_cleaned.rds\")"
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#overview-of-the-private-property-transactions-in-q1y24",
    "href": "TakehomeEx/ex01/takehomeex1.html#overview-of-the-private-property-transactions-in-q1y24",
    "title": "Take Home Ex 1",
    "section": "2.1 Overview of the Private Property Transactions in Q1Y24",
    "text": "2.1 Overview of the Private Property Transactions in Q1Y24\nWe will first start by providing an overview of the private property transactions in the Quarter 1 2024, by trying to answer the following questions:\n\nWhat is the proportion of sales in terms of property type across the quarters? We know that the bulk of transactions would involve Condominiums given their availability as compared to landed properties, but we also want to know the difference between resales/sub-sale as compared to new sales.\n\n\n\nCode\ng1 &lt;- ggplot(subset(realis2324_cleaned, sale_type %in% c(\"Resale\", \"Sub Sale\")), aes(x = quarter, fill = property_type)) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  geom_text(\n    aes(label = ..count.., y = ..count.. + 50 ),\n    stat = \"count\",\n    size = 2,\n    position = position_dodge(0.9),\n    vjust=0)+\n  theme(legend.position=\"none\")+\n  geom_hline(aes(yintercept = 2555), col=\"darkblue\", linewidth=0.2, linetype = \"dashed\") +\n   labs(\n    title = \"Resale Transactions for Condos in Q1Y24 is comparable to Q1Y23\",\n    x = \"Quarters\",\n    y = \"Number of Transactions\"\n  ) +\n  scale_fill_brewer(palette = \"Blues\", name = \"Property Type\") \n\ng1\n\n\n\n\n\n\n\nCode\ng2 &lt;- ggplot(subset(realis2324_cleaned, sale_type %in% \"New Sale\"), aes(x = quarter, fill = property_type)) +\n  geom_bar(position = \"dodge\", color = \"black\") +\n  geom_text(\n    aes(label = ..count.., y = ..count.. + 50 ),\n    stat = \"count\",\n    size = 2,\n    position = position_dodge(0.9),\n    vjust=0)+\n  geom_hline(aes(yintercept = 1154), col=\"darkblue\", linewidth=0.2, linetype = \"dashed\") +\n  labs(\n    title = \"New Sale Transactions for Condos in Q1Y24 is comparable to Q1Y23\",\n    x = \"Quarters\",\n    y = \"Number of Transactions\"\n  ) +\n  scale_fill_brewer(palette = \"Blues\", name = \"Property Type\") \n\ng2\n\n\n\n\n\n\np = (g1 / g2) +\n  plot_annotation('Number of Condo Transactions for Q1Y24 is comparable to Q1Y23')\n\np & theme_minimal()+\n  theme(legend.key.size = unit(0.3, 'cm'), #change legend key size\n        legend.key.height = unit(0.3, 'cm'), #change legend key height\n        legend.key.width = unit(0.3, 'cm'), #change legend key width\n        legend.title = element_text(size=6), #change legend title font size\n        legend.text = element_text(size=6),\n        title=element_text(size=8, face='bold'), \n        axis.text.x = element_text(size = 6),\n        axis.text.y = element_text(size = 8),\n        )\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFrom the graph, we can see that the number of transactions for condominiums is a lot higher as compared to landed properties, with the number of both resale and new sales in Q1Y24 comparable to that in Q1Y23.\nThere are a higher number of new sales in Q2 and Q3 of the year, which is probably explained by the period when the developers like to launch their sales. We can also see that the new sales of landed properties pale in comparison to that of condominiums.\nWhile the new sales in Q1Y24 is comparable to that in Q4Y23, the number of resale transactions decreased by about 305 which is about 10% decrease."
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#transaction-price-on-resale-condos",
    "href": "TakehomeEx/ex01/takehomeex1.html#transaction-price-on-resale-condos",
    "title": "Take Home Ex 1",
    "section": "2.2 Transaction Price on Resale Condos",
    "text": "2.2 Transaction Price on Resale Condos\nNext, we ask the following questions about the resale prices of condos:\n\nHas the overall transaction price of properties, focusing on resale Condominiums increased across the quarter, and year on year comparison for Q1Y24 as compared to Q1Y23?\n\nFirst we look at the data in 2023 and compute some statistical values.\n\ncondo_subset23 &lt;- realis2324_cleaned %&gt;%\n  filter(sale_type %in% c(\"Resale\", \"Sub Sale\"), \n         property_type == \"Condominium\",\n         quarter %in% c(\"Q1Y23\", \"Q2Y23\", \"Q3Y23\", \"Q4Y23\") )\n\n\nresale23_mean &lt;- round(mean(condo_subset23$trans_price))\nresale23_median &lt;- round(median(condo_subset23$trans_price))\n\n\ncondo_subset24 &lt;- realis2324_cleaned %&gt;%\n  filter(sale_type %in% c(\"Resale\", \"Sub Sale\"), \n         property_type == \"Condominium\",\n         quarter %in% c(\"Q1Y24\") )\n\nresale24_mean &lt;- round(mean(condo_subset24$trans_price))\nresale24_median &lt;- round(median(condo_subset24$trans_price))\n\nresaleunit24_median &lt;- round(median(condo_subset24$unit_psm))\nresalesize24_median &lt;- round(median(condo_subset24$unit_area)) \n\n\nymax &lt;- as.numeric(round((IQR(condo_subset24$trans_price)*1.5) +\n                quantile(condo_subset24$trans_price,0.75)))\nymin &lt;- as.integer(min(condo_subset24$trans_price))\n\nNext, we plot the histogram and box plots of the transaction prices of the resale condos (including those sub set sales), up to a limit of $5 million.\n\n\nCode\nh_price &lt;- ggplot(data= condo_subset24, aes(x= trans_price)) +\n  geom_histogram(bins=30) +\n  geom_vline(aes(xintercept = resale23_mean), col=\"darkgrey\", linewidth=0.5, linetype = \"dashed\") +\n  annotate(\"text\", x=2500000, y=360, label=\"Mean Price in 2023:\", \n           size=3, color=\"darkgrey\") +\n  annotate(\"text\", x=2500000, y=330, label=format(resale23_mean, big.mark = \",\"),\n           size=3, color=\"darkgrey\") +\n  geom_vline(aes(xintercept = resale23_median), col=\"darkgrey\", linewidth=0.5, linetype = \"dashed\") +\n  annotate(\"text\", x=900000, y=360, label=\"Median Price in 2023\", \n           size=3, color=\"darkgrey\") +\n  annotate(\"text\", x=900000, y=330, label=format(resale23_median, big.mark = \",\"),\n           size=3, color=\"darkgrey\") +\n  geom_vline(aes(xintercept = resale24_median), col=\"darkblue\", linewidth=0.5, linetype = \"dashed\") +\n  annotate(\"text\", x=900000, y=300, label=\"Median Price in Q1Y24\", \n           size=3, color=\"darkblue\") +\n  annotate(\"text\", x=900000, y=270, label=format(resale24_median, big.mark = \",\"),\n           size=3, color=\"darkblue\")+\n    geom_vline(aes(xintercept = resale24_mean), col=\"darkblue\", linewidth=0.5, linetype = \"dashed\") +\n  annotate(\"text\", x=2500000, y=300, label=\"Mean Price in Q1Y24\", \n           size=3, color=\"darkblue\") +\n  annotate(\"text\", x=2500000, y=270, label=format(resale24_mean, big.mark = \",\"),\n           size=3, color=\"darkblue\") +\n  scale_x_continuous(limits = c(0,5000000),labels = unit_format(unit = \"M\", scale = 1e-6)) +\n  labs(\n    x = \"Transaction Price\",\n    y = \"Number of Transactions\"\n  )\n\n\n\n\nCode\nb_price &lt;- ggplot(data = condo_subset24, aes(y = trans_price)) + \n  geom_boxplot(outlier.colour=\"firebrick\", outlier.shape=16,\n               outlier.size=0.6, notch=FALSE, width = 0.25) + \n  coord_flip() + labs(y = \"\", x = \"\") + \n  scale_y_continuous(limits = c(0,5000000), labels = unit_format(unit = \"M\", scale = 1e-6)) +\n  theme(axis.text = element_blank(), axis.ticks = element_blank()) + \n  stat_boxplot(geom=\"errorbar\", width=0.25) + \n  annotate(\"text\", x=0.15, y=ymax, label=format(ymax, big.mark = \",\"), \n           size=3, color=\"lightpink4\") +\n  annotate(\"text\", x=0.15, y=ymin, label=format(ymin, big.mark = \",\"), \n           size=3, color=\"lightpink4\") +\n  annotate(\"text\", x=-0.15, y=3000000, label=format(resale24_median, big.mark = \",\"),\n           size=3, color=\"lightpink4\") +\n  annotate(\"text\", x=-0.15, y=1000000, label=\"Median Price =\",\n           size=3, color=\"lightpink4\")+\n  labs(title=\"Transaction Price in Q1Y24\")\n\n\n\n\nCode\ncondo_subset2324 &lt;- realis2324_cleaned %&gt;%\n  filter(sale_type %in% c(\"Resale\", \"Sub Sale\"), \n         property_type == \"Condominium\")\n\nbp_price &lt;- ggplot(data=condo_subset2324, \n       aes(y = trans_price, x= quarter)) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_hline(aes(yintercept = resale24_median), col=\"darkblue\", linewidth=0.5, linetype = \"dashed\") +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  scale_y_continuous(limits = c(0,3000000),labels = unit_format(unit = \"M\", scale = 1e-6))+\n  labs(title=\"Transaction Price across Quarters\")\n\n\n\nresale_price24 &lt;- (b_price | bp_price) / h_price\n\np1 &lt;- resale_price24 + plot_annotation(title = \"Both Mean and Median Prices of Resale Transactions are higher in Q1Y24 compared to 2023\")\n\np1 & theme_minimal() +\n  theme(title=element_text(size=8, face='bold'), \n        axis.text.x = element_text(size = 6),\n        axis.text.y = element_text(size = 8),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        )\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nFrom the graphs, we can observe that both the median and mean prices in Q1Y24 are higher as compared to that of 2023. The distribution of prices is also more right-skewed with the mean prices &gt; median prices. When we look across the quarters, there also seem to be a gradual increase in the prices.\nWhile the majority of the prices would fall between $1M to $2.2M, there are also quite a number of properties going for higher prices.\nThis is expected given that the transaction prices of properties are dependent on a variety of factors, mainly location, size of the units, age and many more."
  },
  {
    "objectID": "TakehomeEx/ex01/takehomeex1.html#resale-condo-prices-across-planning-regions-in-q1y24",
    "href": "TakehomeEx/ex01/takehomeex1.html#resale-condo-prices-across-planning-regions-in-q1y24",
    "title": "Take Home Ex 1",
    "section": "2.3 Resale Condo Prices across Planning Regions in Q1Y24",
    "text": "2.3 Resale Condo Prices across Planning Regions in Q1Y24\nNext we will zoom into Q1Y24 to examine the data and see if there is any trend relating to the number of transactions and prices.\n\n\nCode\nregion_number &lt;- ggplot(data = condo_subset24, aes(x = fct_infreq(planning_region))) +\n  geom_bar(stat = 'count', position = \"dodge\", color = \"black\", fill = \"#88abff\") +\n  labs(\n    title = \"Higher number of sales in Central Region\",\n    y = \"Number of Transactions\", x = \"Planning Region\"\n  ) \n\nregion_number\n\n\n\n\n\n\n\nCode\nregion_size &lt;- ggplot(data=condo_subset2324, \n       aes(y = unit_area, x= fct_infreq(planning_region))) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  geom_hline(aes(yintercept = resalesize24_median), col=\"red\", linewidth=0.5, linetype = \"dashed\") +\n  annotate(\"text\", x=4.6, y=150, label=\"Median Unit Size\", \n           size=3, color=\"red\") +\n  annotate(\"text\", x=4.6, y=130, label=format(resalesize24_median, big.mark = \",\"),\n           size=3, color=\"red\")+\n  ylim(0,200) +\n  labs(title=\"Unit Area of Condos Comparable\", y = \"Unit Area (sqm)\", x = \"Planning Region\")\n\nregion_size\n\n\n\n\n\n\n\nCode\nregion_unitprice &lt;- ggplot(data=condo_subset2324, \n       aes(y = unit_psm, x= fct_infreq(planning_region))) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_hline(aes(yintercept = resaleunit24_median), col=\"red\", linewidth=0.5, linetype = \"dashed\") +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  annotate(\"text\", x=4.6, y=30000, label=\"Median Unit Price\", \n           size=3, color=\"red\") +\n  annotate(\"text\", x=4.6, y=27000, label=format(resaleunit24_median, big.mark = \",\"),\n           size=3, color=\"red\")+\n  ylim(0,40000) +\n  labs(title=\"Unit Price ($ sqm) higher in Central Region\", y = \"Unit Price ($ sqm)\", x = \"Planning Region\")\n\nregion_unitprice\n\n\n\n\n\n\n\nCode\nresale_unitprice24 &lt;- region_number | (region_size / region_unitprice)\n\np2 &lt;- resale_unitprice24 + plot_annotation(title = \"Number of Transactions and Prices higher for Central Region\")\n\np2 & theme_minimal() +\n  theme(title=element_text(size=8, face='bold'), \n        axis.text.x = element_text(size = 6),\n        axis.text.y = element_text(size = 8),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        )\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nHere we see that the number of transactions for resale condos in the central region is a lot higher compared to the other regions, and the median price in the central region is also higher compared to the overall median price.\nThe size of the units remain somewhat comparable across the regions, indicating the preference of buyers in this current climate."
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html",
    "href": "InClassEx/Ex02/inclassex02.html",
    "title": "In Class Ex 02",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggdist, ggthemes, ggridges, colorspace)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#loading-the-required-packages",
    "href": "InClassEx/Ex02/inclassex02.html#loading-the-required-packages",
    "title": "In Class Ex 02",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggdist, ggthemes, ggridges, colorspace)"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#loading-exam-data",
    "href": "InClassEx/Ex02/inclassex02.html#loading-exam-data",
    "title": "In Class Ex 02",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#typical-way---using-histogram",
    "href": "InClassEx/Ex02/inclassex02.html#typical-way---using-histogram",
    "title": "In Class Ex 02",
    "section": "2.1 Typical way - Using Histogram",
    "text": "2.1 Typical way - Using Histogram\n\nggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of English scores\") \n\n\n\n\nBy using histogram - the underlying code will bin the data to create the histogram - because they are to be represented in bars."
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#using-probability-density-plot-instead",
    "href": "InClassEx/Ex02/inclassex02.html#using-probability-density-plot-instead",
    "title": "In Class Ex 02",
    "section": "2.2 Using Probability Density Plot Instead",
    "text": "2.2 Using Probability Density Plot Instead\n\nggplot(data=exam_data, aes(x = ENGLISH)) +\n  geom_density(color=\"darkblue\", adjust =.65, alpha = .6, linewidth = 1) +\n  theme_minimal() +\n  ggtitle(\"Distribution of English scores\")"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#the-alternative-design",
    "href": "InClassEx/Ex02/inclassex02.html#the-alternative-design",
    "title": "In Class Ex 02",
    "section": "2.3 The alternative design",
    "text": "2.3 The alternative design\n\nmedian_eng &lt;- median(exam_data$ENGLISH)\nmean_eng &lt;- mean(exam_data$ENGLISH)\nstd_eng &lt;- sd(exam_data$ENGLISH)\n\nggplot(data=exam_data, aes(x = ENGLISH)) +\n  geom_density(color=\"darkblue\", adjust =.65, alpha = .6, linewidth = 1) +\n  stat_function(\n    fun = dnorm,\n    args = list(mean = mean_eng, sd = std_eng),\n    col =\"darkgrey\",\n    linewdith = 0.8\n  ) +\n  geom_vline (aes(xintercept = mean_eng), col = \"red\", linewidth = 0.6) + \n  annotate(\"text\", x= mean_eng - 12, y=0.04, label= paste0(\"Mean ENGLISH: \", round((mean_eng),2)), color=\"red\") + \n  annotate(\"text\", x= median_eng + 12, y=0.04, label= paste0(\"Median ENGLISH: \", round((median_eng),2)), color=\"red\") +\n  geom_vline (aes(xintercept = median_eng), col = \"red\", linewidth = 0.6, linetype = \"dashed\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of English scores\")"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#plotting-using-ggridges-method",
    "href": "InClassEx/Ex02/inclassex02.html#plotting-using-ggridges-method",
    "title": "In Class Ex 02",
    "section": "3.1 Plotting using ggridges method",
    "text": "3.1 Plotting using ggridges method\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nCode\nggplot(exam_data, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#varying-gradient-in-the-ridges",
    "href": "InClassEx/Ex02/inclassex02.html#varying-gradient-in-the-ridges",
    "title": "In Class Ex 02",
    "section": "3.2 Varying Gradient in the Ridges",
    "text": "3.2 Varying Gradient in the Ridges\nWe can adjust the color in the ridges using a gradient - this can be done via either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\n\nCode\nggplot(exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Scores\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#mapping-the-probability-directly-onto-colour",
    "href": "InClassEx/Ex02/inclassex02.html#mapping-the-probability-directly-onto-colour",
    "title": "In Class Ex 02",
    "section": "3.3 Mapping the Probability directly onto Colour",
    "text": "3.3 Mapping the Probability directly onto Colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\n\n\n\n\nCaution\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\nCode\nggplot(exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#to-include-quantile-lines",
    "href": "InClassEx/Ex02/inclassex02.html#to-include-quantile-lines",
    "title": "In Class Ex 02",
    "section": "3.4 To Include Quantile Lines",
    "text": "3.4 To Include Quantile Lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\nCode\nggplot(exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_brewer(palette= \"Blues\", name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"lightblue\", \"lightgrey\", \"darkblue\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\"),\n    ) +\n  theme_ridges()"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#plotting-a-half-eye-graph",
    "href": "InClassEx/Ex02/inclassex02.html#plotting-a-half-eye-graph",
    "title": "In Class Ex 02",
    "section": "4.1 Plotting a Half Eye Graph",
    "text": "4.1 Plotting a Half Eye Graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nggplot(exam_data, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#adding-in-the-boxplot",
    "href": "InClassEx/Ex02/inclassex02.html#adding-in-the-boxplot",
    "title": "In Class Ex 02",
    "section": "4.2 Adding in the boxplot",
    "text": "4.2 Adding in the boxplot\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n#|code-fold: true\n\nggplot(exam_data, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#adding-the-dot-plots",
    "href": "InClassEx/Ex02/inclassex02.html#adding-the-dot-plots",
    "title": "In Class Ex 02",
    "section": "4.3 Adding the dot plots",
    "text": "4.3 Adding the dot plots\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nCode\nggplot(exam_data, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "InClassEx/Ex02/inclassex02.html#finishing-touches",
    "href": "InClassEx/Ex02/inclassex02.html#finishing-touches",
    "title": "In Class Ex 02",
    "section": "4.4 Finishing Touches",
    "text": "4.4 Finishing Touches\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\nCode\nggplot(exam_data, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html",
    "href": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html",
    "title": "Hands On Ex 3 - Part 2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.1.2 Terminology\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nNote\n\n\n\nMust think through whether animation is useful or not!!! Presentation?"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#basic-concepts-of-animation",
    "href": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#basic-concepts-of-animation",
    "title": "Hands On Ex 3 - Part 2",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.1.2 Terminology\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nNote\n\n\n\nMust think through whether animation is useful or not!!! Presentation?"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#importing-data",
    "href": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#importing-data",
    "title": "Hands On Ex 3 - Part 2",
    "section": "2.1 Importing Data",
    "text": "2.1 Importing Data\nIn this exercise, we will be using the Global Population data.\n\ncol &lt;- c(\"Country\", \"Continent\")\n\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\", sheet = \"Data\") %&gt;%\n  mutate(across(all_of(col), factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nNote\n\n\n\nReplaced the deprecated functions in dplyr, so the above is the latest."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#animated-bubble-plot-1",
    "href": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#animated-bubble-plot-1",
    "title": "Hands On Ex 3 - Part 2",
    "section": "4.1 Animated Bubble Plot",
    "text": "4.1 Animated Bubble Plot\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem,  theme(legend.position='none')  should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#using-plot_ly-method",
    "href": "HandsOnEx/HandsOnEx3-2/handson_ex3-2.html#using-plot_ly-method",
    "title": "Hands On Ex 3 - Part 2",
    "section": "4.2 using plot_ly() method",
    "text": "4.2 using plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\n\nbp"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx2/handson_ex02.html",
    "href": "HandsOnEx/HandsOnEx2/handson_ex02.html",
    "title": "Hands On Ex 2",
    "section": "",
    "text": "In this exercise, we will look at using extensions to create more elegant and effective statistical graphics, mainly using these four packages:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\n\n\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nWe will be using the data from Ex 1 - which is the exam grades of a cohort of Primary 3 students from a local school, which is stored in a csv file.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe data comprises seven columns - 4 categorical (ID, Class, Gender and Race) and 3 continuous data (Scores for English, Maths and Science).\n\n\n\nOne of the key challenge in plotting is annotations, especially with a large number of data points.\nHere we use the ggplot2 to look at the English Score vs Maths Score.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nWhich is quite messy.\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\nggplot comes with built-in themes refer to the link for more details. Below is an example using theme_gray().\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum_rc()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nSometimes we want to use multiple graphs to tell a story. We will learn how to do this using the patchwork package.\nBefore we start, we first create the three graphs that we want to use for our data storytelling.\n\nDistribution of Maths ScoresDistribution of English ScoresEnglish Scores vs Maths Scores for Primary 3\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English versus Maths scores\")\n\np3\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nWe can combine patchwork and theme_economist() of ggthemes package:\nAlso note how to create the title and caption under patchwork.\n\npatchwork &lt;- ((p1 / p2) | p3) +\n  plot_annotation('English and Maths Scores of Primary 3 Students', caption = 'made with patchwork')\n\npatchwork & theme_economist() +\n  theme(title=element_text(size=8, face='bold'), axis.text.x = element_text(size = 6))"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx2/handson_ex02.html#overview",
    "href": "HandsOnEx/HandsOnEx2/handson_ex02.html#overview",
    "title": "Hands On Ex 2",
    "section": "",
    "text": "In this exercise, we will look at using extensions to create more elegant and effective statistical graphics, mainly using these four packages:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx2/handson_ex02.html#loading-the-packages",
    "href": "HandsOnEx/HandsOnEx2/handson_ex02.html#loading-the-packages",
    "title": "Hands On Ex 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx2/handson_ex02.html#importing-the-data",
    "href": "HandsOnEx/HandsOnEx2/handson_ex02.html#importing-the-data",
    "title": "Hands On Ex 2",
    "section": "",
    "text": "We will be using the data from Ex 1 - which is the exam grades of a cohort of Primary 3 students from a local school, which is stored in a csv file.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe data comprises seven columns - 4 categorical (ID, Class, Gender and Race) and 3 continuous data (Scores for English, Maths and Science)."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx2/handson_ex02.html#annotations-using-ggrepel",
    "href": "HandsOnEx/HandsOnEx2/handson_ex02.html#annotations-using-ggrepel",
    "title": "Hands On Ex 2",
    "section": "",
    "text": "One of the key challenge in plotting is annotations, especially with a large number of data points.\nHere we use the ggplot2 to look at the English Score vs Maths Score.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\nWhich is quite messy.\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx2/handson_ex02.html#themes",
    "href": "HandsOnEx/HandsOnEx2/handson_ex02.html#themes",
    "title": "Hands On Ex 2",
    "section": "",
    "text": "ggplot comes with built-in themes refer to the link for more details. Below is an example using theme_gray().\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum_rc()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx2/handson_ex02.html#creating-multiple-graphs",
    "href": "HandsOnEx/HandsOnEx2/handson_ex02.html#creating-multiple-graphs",
    "title": "Hands On Ex 2",
    "section": "",
    "text": "Sometimes we want to use multiple graphs to tell a story. We will learn how to do this using the patchwork package.\nBefore we start, we first create the three graphs that we want to use for our data storytelling.\n\nDistribution of Maths ScoresDistribution of English ScoresEnglish Scores vs Maths Scores for Primary 3\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English versus Maths scores\")\n\np3\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\np1 + p2\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\nWe can combine patchwork and theme_economist() of ggthemes package:\nAlso note how to create the title and caption under patchwork.\n\npatchwork &lt;- ((p1 / p2) | p3) +\n  plot_annotation('English and Maths Scores of Primary 3 Students', caption = 'made with patchwork')\n\npatchwork & theme_economist() +\n  theme(title=element_text(size=8, face='bold'), axis.text.x = element_text(size = 6))"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\nFor this exercise, we will be using the Year End Examination Grades of a cohort of Primary 3 students from a local school.\nWe will use the read_csv function of readr/tidyverse to read the provided data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nhead (exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\nWe use the head() to take a look at the columns - which comprise seven columns - 4 categorical (ID, Class, Gender and Race) and 3 continuous data (Scores for English, Maths and Science).\n\n\n\nWe will first look at ggplot.\nggplot cheat sheet:\n\n\n\n\nComparing the choice of using R Graphics vs ggplot:\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nGood to learn ggplot2 as it provides a more powerful tool that is customisable, although it means learning its way of language first. That said, we all need to do more customisation at some point in time - so just jump into it!\n\n\n\n\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\nLets break down the elements of ggplot2.\nWhen we use ggplot() , it initialises a ggplot object and creates a blank canvas. The data argument defines the dataset that we want to plot. If the dataset is not already a data.frame, it will be converted to one by fortify().\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\nRefer to this linkfor more info.\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip() - a cartesian system with the x and y flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, linewidth=0.5)\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n\n\n\n\n\n\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#loading-of-the-required-packages",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#loading-of-the-required-packages",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#loading-the-data-set",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#loading-the-data-set",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "For this exercise, we will be using the Year End Examination Grades of a cohort of Primary 3 students from a local school.\nWe will use the read_csv function of readr/tidyverse to read the provided data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nhead (exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\nWe use the head() to take a look at the columns - which comprise seven columns - 4 categorical (ID, Class, Gender and Race) and 3 continuous data (Scores for English, Maths and Science)."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#introducing-ggplot",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#introducing-ggplot",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "We will first look at ggplot.\nggplot cheat sheet:\n\n\n\n\nComparing the choice of using R Graphics vs ggplot:\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nGood to learn ggplot2 as it provides a more powerful tool that is customisable, although it means learning its way of language first. That said, we all need to do more customisation at some point in time - so just jump into it!"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#grammar-of-graphics",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#grammar-of-graphics",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\nWhat is a statistical graphic?\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#essential-elements-of-ggplot2",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#essential-elements-of-ggplot2",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "Lets break down the elements of ggplot2.\nWhen we use ggplot() , it initialises a ggplot object and creates a blank canvas. The data argument defines the dataset that we want to plot. If the dataset is not already a data.frame, it will be converted to one by fortify().\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#aesthetic-mappings",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#aesthetic-mappings",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "Refer to this linkfor more info.\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#geom",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#geom",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "Geometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#stat-function",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#stat-function",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "The Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#facets",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#facets",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#coordinates",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#coordinates",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian() - the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip() - a cartesian system with the x and y flipped.\ncoord_fixed() - a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap() - a coordinate system that approximates a good aspect ratio for maps.\n\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, linewidth=0.5)\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#themes",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#themes",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "Themes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx1/handson_ex01.html#reference",
    "href": "HandsOnEx/HandsOnEx1/handson_ex01.html#reference",
    "title": "Hands-On Ex 1",
    "section": "",
    "text": "Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#importing-data",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#importing-data",
    "title": "Hands-On Ex 3",
    "section": "1.1 Importing Data",
    "text": "1.1 Importing Data\nWe will be using the exam data again for this ex.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-On Ex 3",
    "section": "2.1 Tooltip Effect with tooltip aesthetic",
    "text": "2.1 Tooltip Effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\n\n\n\n\n\nNote\n\n\n\nHovering the mouse pointer over a data point will show the Student’s ID.\n\n\n\np &lt;- ggplot(data=exam_data,aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL,breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#multiple-information-on-tooltip",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#multiple-information-on-tooltip",
    "title": "Hands-On Ex 3",
    "section": "2.2 Multiple Information on tooltip",
    "text": "2.2 Multiple Information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n\n\n\n\n\nNote\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\n\nexam_data$tooltip &lt;- c(paste0(\"Name = \", exam_data$ID, \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p,width_svg = 8, height_svg = 8*0.618)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#customising-the-styles-of-the-tooltip",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#customising-the-styles-of-the-tooltip",
    "title": "Hands-On Ex 3",
    "section": "2.3 Customising the Styles of the Tooltip",
    "text": "2.3 Customising the Styles of the Tooltip\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; \nfont-style:bold; color:black;\" \n\nexam_data$tooltip &lt;- c(paste0(\"Name = \", exam_data$ID, \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p,width_svg = 8, height_svg = 8*0.618, \n       options = list(opts_tooltip(css = tooltip_css)))"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#displaying-statistics-on-tooltip",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-On Ex 3",
    "section": "2.4 Displaying Statistics on Tooltip",
    "text": "2.4 Displaying Statistics on Tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, tooltip = after_stat(tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point, width_svg = 8, height_svg = 8*0.618)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#hover-effect-with-data_id-aesthetic",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-On Ex 3",
    "section": "2.5 Hover Effect with data_id aesthetic",
    "text": "2.5 Hover Effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, aes(x = MATHS))+ \n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(ggobj = p, width_svg = 8, height_svg = 8*0.618)          \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#styling-hover-effect",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#styling-hover-effect",
    "title": "Hands-On Ex 3",
    "section": "2.6 Styling Hover Effect",
    "text": "2.6 Styling Hover Effect\n\np &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#combining-both-effects",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#combining-both-effects",
    "title": "Hands-On Ex 3",
    "section": "2.7 Combining both Effects",
    "text": "2.7 Combining both Effects\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#click-effect-with-onclick",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#click-effect-with-onclick",
    "title": "Hands-On Ex 3",
    "section": "2.8 Click effect with onclick",
    "text": "2.8 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-On Ex 3",
    "section": "2.9 Coordinated Multiple Views with ggiraph",
    "text": "2.9 Coordinated Multiple Views with ggiraph\nWe can build a graph where data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#working-with-visual-variable",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#working-with-visual-variable",
    "title": "Hands-On Ex 3",
    "section": "3.1 Working with visual variable",
    "text": "3.1 Working with visual variable\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#using-ggplotly-method",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#using-ggplotly-method",
    "title": "Hands-On Ex 3",
    "section": "3.2 Using ggplotly() method",
    "text": "3.2 Using ggplotly() method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#coordinated-multiple-views-with-plotly",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-On Ex 3",
    "section": "3.3 Coordinated Multiple Views with plotly",
    "text": "3.3 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#interactive-data-table-dt-package",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#interactive-data-table-dt-package",
    "title": "Hands-On Ex 3",
    "section": "4.1 Interactive Data Table: DT package",
    "text": "4.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#linked-brushing-crosstalk-method",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-On Ex 3",
    "section": "4.2 Linked brushing: crosstalk method",
    "text": "4.2 Linked brushing: crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#ggiraph",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#ggiraph",
    "title": "Hands-On Ex 3",
    "section": "5.1 ggiraph",
    "text": "5.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "HandsOnEx/HandsOnEx3/handson_ex03.html#plotly-for-r",
    "href": "HandsOnEx/HandsOnEx3/handson_ex03.html#plotly-for-r",
    "title": "Hands-On Ex 3",
    "section": "5.2 plotly for R",
    "text": "5.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "InClassEx/Ex01/inclassex01.html",
    "href": "InClassEx/Ex01/inclassex01.html",
    "title": "In Class Ex 01",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\nRmb to use read_csv instead or read.csv\nUsing read_csv will retain the field names as per the csv file.\n\nrealis2019 &lt;- read_csv(\"data/realis2019.csv\")\n\n\n\n\nFirst - to take a look at the data:\n\nhead(realis2019)\n\n# A tibble: 6 × 20\n  `Project Name`           Address    `No. of Units` `Area (sqm)` `Type of Area`\n  &lt;chr&gt;                    &lt;chr&gt;               &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;         \n1 PEIRCE VIEW              557 Upper…              1          113 Strata        \n2 FLORIDA PARK             54 Sunris…              1          312 Land          \n3 BULLION PARK             164 Lento…              1           75 Strata        \n4 CASTLE GREEN             483 Yio C…              1          107 Strata        \n5 HAPPY ESTATE             36 Thomso…              1          687 Land          \n6 TEACHER'S HOUSING ESTATE 148 Tagor…              1          228 Land          \n# ℹ 15 more variables: `Transacted Price ($)` &lt;dbl&gt;, `Nett Price($)` &lt;chr&gt;,\n#   `Unit Price ($ psm)` &lt;dbl&gt;, `Unit Price ($ psf)` &lt;dbl&gt;, `Sale Date` &lt;chr&gt;,\n#   `Property Type` &lt;chr&gt;, Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;,\n#   `Type of Sale` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal District` &lt;dbl&gt;, `Postal Sector` &lt;dbl&gt;, `Postal Code` &lt;dbl&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;\n\n\n\ncolnames(realis2019)\n\n [1] \"Project Name\"                \"Address\"                    \n [3] \"No. of Units\"                \"Area (sqm)\"                 \n [5] \"Type of Area\"                \"Transacted Price ($)\"       \n [7] \"Nett Price($)\"               \"Unit Price ($ psm)\"         \n [9] \"Unit Price ($ psf)\"          \"Sale Date\"                  \n[11] \"Property Type\"               \"Tenure\"                     \n[13] \"Completion Date\"             \"Type of Sale\"               \n[15] \"Purchaser Address Indicator\" \"Postal District\"            \n[17] \"Postal Sector\"               \"Postal Code\"                \n[19] \"Planning Region\"             \"Planning Area\"              \n\n\n\nrealis2019 &lt;- realis2019 %&gt;% \n  rename(\n    unit_psm = 'Unit Price ($ psm)',\n    unit_psf = 'Unit Price ($ psf)',\n    sale_date = 'Sale Date',\n    property_type = `Property Type`,\n    sale_type = `Type of Sale`,\n    planning_region = `Planning Region`,\n    planning_area = `Planning Area`,\n    trans_price = `Transacted Price ($)`\n      )\n\nChecking the transaction price across planning regions:\n\nggplot(data=realis2019, \n       aes(x= trans_price)) +\n  geom_histogram(bins=50) +\n  xlim (0, 5000000) +\n  facet_wrap(~ planning_region) +\n  labs(title=\"Histogram of Transacted Price across Planning Regions (up to $5M)\", y=\"Count\", x=\"Transacted Price ($)\")+\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 6))\n\n\n\n\n\nggplot(data=realis2019, \n       aes(x= unit_psm)) +\n  geom_histogram(bins=50) +\n  labs(title=\"Histogram of Unit Price (psf)\", y=\"Count\", x=\"Transacted Price ($)\") +\n  theme_minimal()\n\n\n\n\n\nggplot(data=realis2019, \n       aes(x= unit_psm)) +\n  geom_histogram(bins=50) +\n  facet_wrap(~ planning_region) +\n  labs(title=\"Histogram of Unit Price (psf) across Planning Regions\", y=\"Count\", x=\"Transacted Price ($)\")+\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 8))\n\n\n\n\nTaking a look at the unit price (psf) across property types:\n\nggplot(data=realis2019, \n       aes(y = unit_psf, x= property_type)) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  theme_light() +\n  labs(title=\"Unit Price (psf) across Property Type\", y=\"Unit Price ($psf)\", x=\"Property Type\")\n\n\n\n\nand across planning regions:\n\nggplot(data=realis2019, \n       aes(y = unit_psf, x= planning_region)) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  theme_light() +\n  labs(title=\"Unit Price (psf) across Planning Region\", y=\"Unit Price ($psf)\", x=\"Planning Region\")"
  },
  {
    "objectID": "InClassEx/Ex01/inclassex01.html#loading-the-required-packages",
    "href": "InClassEx/Ex01/inclassex01.html#loading-the-required-packages",
    "title": "In Class Ex 01",
    "section": "",
    "text": "pacman::p_load(tidyverse)"
  },
  {
    "objectID": "InClassEx/Ex01/inclassex01.html#loading-the-data",
    "href": "InClassEx/Ex01/inclassex01.html#loading-the-data",
    "title": "In Class Ex 01",
    "section": "",
    "text": "Rmb to use read_csv instead or read.csv\nUsing read_csv will retain the field names as per the csv file.\n\nrealis2019 &lt;- read_csv(\"data/realis2019.csv\")"
  },
  {
    "objectID": "InClassEx/Ex01/inclassex01.html#some-visualisation",
    "href": "InClassEx/Ex01/inclassex01.html#some-visualisation",
    "title": "In Class Ex 01",
    "section": "",
    "text": "First - to take a look at the data:\n\nhead(realis2019)\n\n# A tibble: 6 × 20\n  `Project Name`           Address    `No. of Units` `Area (sqm)` `Type of Area`\n  &lt;chr&gt;                    &lt;chr&gt;               &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;         \n1 PEIRCE VIEW              557 Upper…              1          113 Strata        \n2 FLORIDA PARK             54 Sunris…              1          312 Land          \n3 BULLION PARK             164 Lento…              1           75 Strata        \n4 CASTLE GREEN             483 Yio C…              1          107 Strata        \n5 HAPPY ESTATE             36 Thomso…              1          687 Land          \n6 TEACHER'S HOUSING ESTATE 148 Tagor…              1          228 Land          \n# ℹ 15 more variables: `Transacted Price ($)` &lt;dbl&gt;, `Nett Price($)` &lt;chr&gt;,\n#   `Unit Price ($ psm)` &lt;dbl&gt;, `Unit Price ($ psf)` &lt;dbl&gt;, `Sale Date` &lt;chr&gt;,\n#   `Property Type` &lt;chr&gt;, Tenure &lt;chr&gt;, `Completion Date` &lt;chr&gt;,\n#   `Type of Sale` &lt;chr&gt;, `Purchaser Address Indicator` &lt;chr&gt;,\n#   `Postal District` &lt;dbl&gt;, `Postal Sector` &lt;dbl&gt;, `Postal Code` &lt;dbl&gt;,\n#   `Planning Region` &lt;chr&gt;, `Planning Area` &lt;chr&gt;\n\n\n\ncolnames(realis2019)\n\n [1] \"Project Name\"                \"Address\"                    \n [3] \"No. of Units\"                \"Area (sqm)\"                 \n [5] \"Type of Area\"                \"Transacted Price ($)\"       \n [7] \"Nett Price($)\"               \"Unit Price ($ psm)\"         \n [9] \"Unit Price ($ psf)\"          \"Sale Date\"                  \n[11] \"Property Type\"               \"Tenure\"                     \n[13] \"Completion Date\"             \"Type of Sale\"               \n[15] \"Purchaser Address Indicator\" \"Postal District\"            \n[17] \"Postal Sector\"               \"Postal Code\"                \n[19] \"Planning Region\"             \"Planning Area\"              \n\n\n\nrealis2019 &lt;- realis2019 %&gt;% \n  rename(\n    unit_psm = 'Unit Price ($ psm)',\n    unit_psf = 'Unit Price ($ psf)',\n    sale_date = 'Sale Date',\n    property_type = `Property Type`,\n    sale_type = `Type of Sale`,\n    planning_region = `Planning Region`,\n    planning_area = `Planning Area`,\n    trans_price = `Transacted Price ($)`\n      )\n\nChecking the transaction price across planning regions:\n\nggplot(data=realis2019, \n       aes(x= trans_price)) +\n  geom_histogram(bins=50) +\n  xlim (0, 5000000) +\n  facet_wrap(~ planning_region) +\n  labs(title=\"Histogram of Transacted Price across Planning Regions (up to $5M)\", y=\"Count\", x=\"Transacted Price ($)\")+\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 6))\n\n\n\n\n\nggplot(data=realis2019, \n       aes(x= unit_psm)) +\n  geom_histogram(bins=50) +\n  labs(title=\"Histogram of Unit Price (psf)\", y=\"Count\", x=\"Transacted Price ($)\") +\n  theme_minimal()\n\n\n\n\n\nggplot(data=realis2019, \n       aes(x= unit_psm)) +\n  geom_histogram(bins=50) +\n  facet_wrap(~ planning_region) +\n  labs(title=\"Histogram of Unit Price (psf) across Planning Regions\", y=\"Count\", x=\"Transacted Price ($)\")+\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 8))\n\n\n\n\nTaking a look at the unit price (psf) across property types:\n\nggplot(data=realis2019, \n       aes(y = unit_psf, x= property_type)) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  theme_light() +\n  labs(title=\"Unit Price (psf) across Property Type\", y=\"Unit Price ($psf)\", x=\"Property Type\")\n\n\n\n\nand across planning regions:\n\nggplot(data=realis2019, \n       aes(y = unit_psf, x= planning_region)) +\n  geom_boxplot(colour =\"black\", fill=\"#88abff\", alpha=0.5) +\n  geom_point(stat=\"summary\",        \n             fun=mean,           \n             colour =\"darkblue\",          \n             size=2) +\n  theme_light() +\n  labs(title=\"Unit Price (psf) across Planning Region\", y=\"Unit Price ($psf)\", x=\"Planning Region\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - Visual Analytics",
    "section": "",
    "text": "This is the website created for ISSS608 - Visual Analytics as part of my journey through MITB in SMU."
  },
  {
    "objectID": "InClassEx/Ex03/inclassex3.html",
    "href": "InClassEx/Ex03/inclassex3.html",
    "title": "In-Class Ex 3",
    "section": "",
    "text": "can futher use the quick table calculation to spread the data\n\n\n\n\n\n\nDrop the variables into the “Marks” field\n\nSelect Size for Sum(Sales)\nSelect Colour Sum(Profit)\n\n\nChange the shape to circle - then it will be fill circles\nThe colors can also be further adjusted - together with the range\n\nUsing annotate area to annotate the four quadrants:\n\nCreating filter interactivity - expose the interface for the filters (checkbox)\n\nAdjusting the title of the graph - click on the insert button (to select the fields to show)\n\n\n\n\nCreate a second worksheet\n\nuse of dual-axis (select from the row button)\nadjust the color range (to be red for below 0, and blue for above 0)\n add in the sum(profit) into the color - then adjust the color range\n\n\n\nUse the edit tooltip on the first worksheet, click the insert button to insert from worksheet 2\n\n\n\n\n\nhttps://public.tableau.com/app/profile/chun.chieh.cheng/viz/ProfitLoss_17141962081520/Dashboard1?publish=yes\n\n\n\nInstead of dropping the Order_Date into filter -&gt; drop them into pages\n\n\nIt will show the animation pane on the right hand side.\nNext we adjust the timeframe to show by quarters instead.\n\n\n\nCreate the graphs to show in Tableu\n\nHere we are using the Maths and Science data from Exam_Data\n\nThen we will use the “Actions” under Dashboard menu item to create this.\n\n\n\nNeed to use ID under the scatterplot to sort of link the data up together"
  },
  {
    "objectID": "InClassEx/Ex03/inclassex3.html#drawing-a-scatterplot",
    "href": "InClassEx/Ex03/inclassex3.html#drawing-a-scatterplot",
    "title": "In-Class Ex 3",
    "section": "",
    "text": "can futher use the quick table calculation to spread the data"
  },
  {
    "objectID": "InClassEx/Ex03/inclassex3.html#changing-to-a-bubbleplot",
    "href": "InClassEx/Ex03/inclassex3.html#changing-to-a-bubbleplot",
    "title": "In-Class Ex 3",
    "section": "",
    "text": "Drop the variables into the “Marks” field\n\nSelect Size for Sum(Sales)\nSelect Colour Sum(Profit)\n\n\nChange the shape to circle - then it will be fill circles\nThe colors can also be further adjusted - together with the range\n\nUsing annotate area to annotate the four quadrants:\n\nCreating filter interactivity - expose the interface for the filters (checkbox)\n\nAdjusting the title of the graph - click on the insert button (to select the fields to show)"
  },
  {
    "objectID": "InClassEx/Ex03/inclassex3.html#creating-a-custom-tooltip",
    "href": "InClassEx/Ex03/inclassex3.html#creating-a-custom-tooltip",
    "title": "In-Class Ex 3",
    "section": "",
    "text": "Create a second worksheet\n\nuse of dual-axis (select from the row button)\nadjust the color range (to be red for below 0, and blue for above 0)\n add in the sum(profit) into the color - then adjust the color range\n\n\n\nUse the edit tooltip on the first worksheet, click the insert button to insert from worksheet 2"
  },
  {
    "objectID": "InClassEx/Ex03/inclassex3.html#profit-loss-dashboard",
    "href": "InClassEx/Ex03/inclassex3.html#profit-loss-dashboard",
    "title": "In-Class Ex 3",
    "section": "",
    "text": "https://public.tableau.com/app/profile/chun.chieh.cheng/viz/ProfitLoss_17141962081520/Dashboard1?publish=yes"
  },
  {
    "objectID": "InClassEx/Ex03/inclassex3.html#creating-animation-from-time",
    "href": "InClassEx/Ex03/inclassex3.html#creating-animation-from-time",
    "title": "In-Class Ex 3",
    "section": "",
    "text": "Instead of dropping the Order_Date into filter -&gt; drop them into pages\n\n\nIt will show the animation pane on the right hand side.\nNext we adjust the timeframe to show by quarters instead."
  },
  {
    "objectID": "InClassEx/Ex03/inclassex3.html#creating-coordinated-link-view",
    "href": "InClassEx/Ex03/inclassex3.html#creating-coordinated-link-view",
    "title": "In-Class Ex 3",
    "section": "",
    "text": "Create the graphs to show in Tableu\n\nHere we are using the Maths and Science data from Exam_Data\n\nThen we will use the “Actions” under Dashboard menu item to create this.\n\n\n\nNeed to use ID under the scatterplot to sort of link the data up together"
  },
  {
    "objectID": "HandsOnEx/HandsOnEx4/handsonex4.html",
    "href": "HandsOnEx/HandsOnEx4/handsonex4.html",
    "title": "Hands On Ex 4",
    "section": "",
    "text": "Visualising Statistical Analysis"
  }
]